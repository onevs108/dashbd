<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.catenoid.dashbd.dao.ScheduleMapper" >
	<select id="selectSchduleMaxPosition" parameterType="java.util.Map" resultType="Integer">
		SELECT IFNULL(MAX(depthPosition), 0) + 1 FROM  
		(
		   SELECT start_comp, end_comp,
		         (
		            SELECT count(*) FROM schedule s  
		            WHERE       
		            del_yn = 'N'
			    	<if test="serviceAreaId != null and serviceAreaId !=''" >
						AND <if test="type == 'area'">instr(CONCAT(',', service_area_id, ','), CONCAT(',',#{serviceAreaId},',')) > 0</if>
							<if test="type == 'group'">service_group_id = #{serviceAreaId}</if>
							<if test="type == 'national'">national_yn = 'Y' and emergency_yn is null</if>
							<if test="type == 'emergency'">national_yn = 'Y' and emergency_yn = 'Y'</if> 
					</if>
					<if test="searchDate != null and searchDate !=''" >
						AND DATE_FORMAT(start_date , '%Y-%m-%d') = #{searchDate}
					</if>
		            <![CDATA[                  
		            AND start_comp > DATE_FORMAT(start_date, '%H%i%s')      
		            AND start_comp < DATE_FORMAT(end_date, '%H%i%s')
		            ]]>        
		         ) depthPosition
		   FROM
		   (
		      SELECT     
		         DATE_FORMAT(start_date, '%H%i%s') start_comp,     
		         DATE_FORMAT(end_date, '%H%i%s') end_comp      
		      FROM schedule s
		      WHERE         
	          del_yn = 'N'
		    	<if test="serviceAreaId != null and serviceAreaId !=''" >
					AND <if test="type == 'area'">instr(CONCAT(',', service_area_id, ','), CONCAT(',',#{serviceAreaId},',')) > 0</if>
						<if test="type == 'group'">service_group_id = #{serviceAreaId}</if>
						<if test="type == 'national'">national_yn = 'Y' and emergency_yn is null</if> 
						<if test="type == 'emergency'">national_yn = 'Y' and emergency_yn = 'Y'</if> 
				</if>
				<if test="searchDate != null and searchDate !=''" >
					AND DATE_FORMAT(start_date , '%Y-%m-%d') = #{searchDate}
				</if>   
		   ) x
		) a

	</select>
	
	<select id="selectSchdule" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT ID
			, service_area_id
			, service_group_id
			, national_yn
			, emergency_yn
			, NAME
			, BCID
			, start_comp 
				, end_comp
				, (SELECT count(*) FROM schedule 
					WHERE del_yn = 'N'
		    	<if test="serviceAreaId != null and serviceAreaId !=''" >
					AND <if test="type == 'area'">instr(CONCAT(',', service_area_id, ','), CONCAT(',',#{serviceAreaId},',')) > 0</if>
						<if test="type == 'group'">service_group_id = #{serviceAreaId}</if>
						<if test="type == 'national'">national_yn = 'Y' and emergency_yn is null</if> 
						<if test="type == 'emergency'">national_yn = 'Y' and emergency_yn = 'Y'</if> 
				</if>
				<if test="searchDate != null and searchDate !=''" >
					AND DATE_FORMAT(start_date , '%Y-%m-%d') = #{searchDate}
				</if>
			<![CDATA[
					AND start_comp > DATE_FORMAT(start_date, '%H%i%s') 
				AND start_comp < DATE_FORMAT(end_date, '%H%i%s')
			]]>
				  ) depthPosition
			, DATE_FORMAT(start_date, '%Y-%m-%dT%H:%i:%s') start_date
			, DATE_FORMAT(end_date, '%Y-%m-%dT%H:%i:%s') end_date
			
			, DATE_FORMAT(start_date , '%Y') start_year 
			, DATE_FORMAT(start_date , '%m') start_month
			, DATE_FORMAT(start_date , '%d') start_day
			, DATE_FORMAT(start_date , '%H') start_hour
			, DATE_FORMAT(start_date , '%i') start_mins
			, DATE_FORMAT(end_date , '%Y') end_year 
			, DATE_FORMAT(end_date , '%m') end_month
			, DATE_FORMAT(end_date , '%d') end_day
			, DATE_FORMAT(end_date , '%H') end_hour
			, DATE_FORMAT(end_date , '%i') end_mins
			, service
			, serviceId
			, serviceMode
			, contentsType
		FROM 
		(
		SELECT     
	         DATE_FORMAT(s.start_date, '%H%i%s') start_comp,     
	         DATE_FORMAT(s.end_date, '%H%i%s') end_comp,
	         s.ID,
	         s.service_area_id,
			 s.service_group_id,
			 s.national_yn, 
			 s.emergency_yn, 
			 s.NAME,
			 s.BCID,
			 s.start_date,
	         s.end_date,
	         b.service,
	         b.serviceId,
	         b.serviceMode,
	         (select type from contents where id = s.content_id) as contentsType
	      FROM schedule s left join broadcast_info b on s.BCID = b.BCID 
	      WHERE
		 	s.del_yn = 'N'
	    	<if test="serviceAreaId != null and serviceAreaId !=''" >
	    		AND <if test="type == 'area'">instr(CONCAT(',', s.service_area_id, ','), CONCAT(',',#{serviceAreaId},',')) > 0</if>
					<if test="type == 'group'">s.service_group_id = #{serviceAreaId}</if>
					<if test="type == 'national'">s.national_yn = 'Y' and s.emergency_yn is null </if>
					<if test="type == 'emergency'">s.national_yn = 'Y' and s.emergency_yn = 'Y' </if> 
			</if>
			<if test="searchDate != null and searchDate !=''" >
				AND DATE_FORMAT(s.start_date , '%Y-%m-%d') = #{searchDate}
			</if> 
			<if test="serviceType != null and serviceType !=''" >
				AND b.service = #{serviceType}
			</if> 
			<if test="serviceClass != null and serviceClass !=''" >
				AND b.serviceClass = #{serviceClass}
			</if>
		) x
			order by start_date asc
	</select>
	
	<sql id="schedule_where" >
	 	del_yn = 'N'
    	<if test="serviceAreaId != null and serviceAreaId !=''" >
			AND service_area_id = #{serviceAreaId}
		</if>
		<if test="bmscId != null and bmscId !=''" >
			AND service_area_id in (SELECT service_area_id FROM bmsc_service_area WHERE bmsc_id = #{bmscId})
		</if>
		<if test="searchDate != null and searchDate !=''" >
			AND DATE_FORMAT(start_date , '%Y-%m-%d') = #{searchDate}
		</if> 
  	</sql>
	
	<select id="selectSchduleContentURL" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT url
		FROM
		contents c, schedule s
		WHERE c.id = s.content_id
		AND s.id =#{id}
	</select>
	
	
	<select id="selectSchduleContentList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT  schedule_id,
				content_id,
				cancelled, 
				changed,   
				url,
				mpd,       
				DATE_FORMAT(start_time, '%Y-%m-%d %H:%i:%s') start_time,
				DATE_FORMAT(end_time, '%Y-%m-%d %H:%i:%s') end_time,  
				r12mpdURI,
				bcBasePattern,
				(select duration from contents where contents.id = content_id) duration,
				created_at,
				updated_at 
		FROM schedule_contents
		WHERE 1=1
		AND
		<choose>
		<when test="id == null or id == ''">
			schedule_id = (select ifnull(id, '') from schedule where BCID = #{BCID})
		</when>
		<otherwise>
			schedule_id = #{id}
		</otherwise>
		</choose>
	</select>
	
	<select id="selectSchduleTime" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT id
			, bmscId as bmscId
			, service_area_id as serviceAreaId
			, service_group_id as serviceGroupId
			, ifnull(national_yn, '') as nationalYN
			, ifnull(emergency_yn, '') as emergencyYN
			, content_id as contentId
			, name
			, s.BCID
			, DATE_FORMAT(start_date, '%Y-%m-%d') searchDate
			, DATE_FORMAT(start_date, '%Y-%m-%d %H:%i:%s') start_date
			, DATE_FORMAT(end_date, '%Y-%m-%d %H:%i:%s') end_date
			, DATE_FORMAT(start_date , '%H') start_hour
			, DATE_FORMAT(start_date , '%i') start_mins
			, DATE_FORMAT(start_date , '%s') start_second
			, DATE_FORMAT(end_date , '%H') end_hour
			, DATE_FORMAT(end_date , '%i') end_mins
			, DATE_FORMAT(end_date , '%s') end_second
			, b.transactionId
			, b.serviceId
			, b.service
			, b.service_name
			, b.serviceClass
			, b.serviceNameLanguage
			, b.language
			, b.GBR
			, b.QCI
			, b.level
			, b.preEmptionCapabiity
			, b.preEmptionVulnerability
			, b.fecType
			, b.fecRatio
			, b.said
			, b.segmentAvailableOffset 
			, DATE_FORMAT(DATE_ADD(start_date, INTERVAL -15 SECOND) , '%Y-%m-%d %H:%i:%s') temp_start
			, DATE_FORMAT(DATE_ADD(end_date, INTERVAL 15 SECOND) , '%Y-%m-%d %H:%i:%s') temp_end
			, DATE_FORMAT(schedule_start, '%Y-%m-%d %H:%i:%s') schedule_start
			, DATE_FORMAT(schedule_stop, '%Y-%m-%d %H:%i:%s') schedule_stop
			, b.frOffsetTime
			, b.frRandomTime
			, b.reportType
			, b.offsetTime
			, b.randomTime
			, b.fileURI
			, DATE_FORMAT(deliveryInfo_start, '%Y-%m-%d %H:%i:%s') deliveryInfo_start
			, DATE_FORMAT(deliveryInfo_end, '%Y-%m-%d %H:%i:%s') deliveryInfo_end
			, b.mpdURI
			, b.samplePercentage
			, b.retrieve_interval
			, (select title from contents where id = s.content_id) content_name
			, (select duration from contents where id = s.content_id) duration
			, b.serviceMode
			, b.bcServiceArea
			, b.moodLocation
			, b.moodReportClientId
			, b.moodReportInterval
			, b.moodOffsetTime
			, b.moodRandomTimePeriod
			, b.moodSamplePercentage
			, b.moodRandomTimePeriod
			, b.moodSamplePercentage
			, b.moodRandomTimePeriod
			, b.moodSamplePercentage
			, b.UCThreshold
			, b.BCThreshold
			, b.fileRepair
			, b.receptionReport
			, b.reportClientId
		FROM schedule s 
		left join broadcast_info b on s.BCID = b.BCID
		WHERE 1=1
		AND id = #{id}
	</select>
	
	<select id="selectServiceIdList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT *
		FROM 
		(
			select *
			from service_id
			order by id desc
		) x
		limit #{page}, #{perPage}
	</select>
	
	<select id="selectServiceIdCount" parameterType="java.util.Map" resultType="int">
		SELECT count(*)
		FROM 
		(
			select *
			from service_id
		) x
	</select>
	
	<select id="selectServiceId" parameterType="java.util.Map" resultType="int">
		select count(*) from service_id
		where id_name = #{idName} 
	</select>
	
	<insert id="insertServiceId" parameterType="java.util.Map">
		insert into service_id(
			id_name, description	
		)
		values(
			#{idName}, #{idDescription}
		)
	</insert> 
	
	<insert id="insertServiceIdIdx" parameterType="java.util.Map">
		insert into service_id_idx(
			id_format, id_idx	
		)
		values(
			#{idName}, 1
		)
	</insert> 
	
	<select id="getServiceIdIdx" parameterType="java.util.Map" resultType="int">
		select id_idx 
		from service_id_idx
		where id_format = #{serviceId} 
	</select> 
	
	<select id="selectServiceIdAll" resultType="java.util.Map">
		select *
		from service_id
		order by id desc
	</select>
	
	<select id="selectServiceIdIdx" resultType="int">
		select id_idx
		from service_id_idx
	</select>
	
	<update id="updateServiceIdIdx" parameterType="java.util.Map">
		update service_id_idx
		set id_idx = ${serviceIdIdx} + 1
		where id_format = #{serviceIdFormat}
	</update>
	
	<select id="checkServiceId" resultType="int">
		select count(*)
		from broadcast_info a inner join schedule s on a.BCID = s.BCID
		where serviceId = #{serviceId}
	    and s.del_yn = 'N'
	</select>
	
	<select id="selectServiceIdName" parameterType="java.util.Map" resultType="String">
		select id_name
		from service_id 
		where id = #{id}
	</select>
	
	<update id="editServiceId" parameterType="java.util.Map">
		update service_id
		set id_name = #{idName}, description = #{description} 
		where id = #{id}
	</update>
	
	<update id="editServiceIdIdx" parameterType="java.util.Map">
		update service_id_idx
		set id_format = #{idName}, id_idx = 1 
		where id_format = #{beforeServiceId}
	</update>
	
	<delete id="deleteServiceId" parameterType="java.util.Map">
		delete from service_id
		where id = #{id}
	</delete>
	
	<!-- serviceID 끝 -->
		
	<select id="selectServiceClassList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT *
		FROM 
		(
			select *
			from service_class
			order by id desc
		) x
		limit #{page}, #{perPage}
	</select>
	
	<select id="selectServiceClassAll" resultType="java.util.Map">
		select *
		from service_class
		order by id desc
	</select>
	
	<update id="editServiceClass" parameterType="java.util.Map">
		update service_class
		set class_name = #{className}, description = #{description} 
		where id = #{id}
	</update>
	
	<delete id="deleteServiceClass" parameterType="java.util.Map">
		delete from service_class
		where id = #{id}
	</delete>
	
	<select id="selectServiceClassCount" parameterType="java.util.Map" resultType="int">
		SELECT count(*)
		FROM 
		(
			select *
			from service_class
		) x
	</select>
	
	<insert id="insertServiceClass" parameterType="java.util.Map">
		insert into service_class(
			class_name, description	
		)
		values(
			#{className}, #{description}
		)
	</insert>
	
	<select id="selectServiceClass" parameterType="java.util.Map" resultType="int">
		select count(*) from service_class
		where class_name = #{className} 
	</select>
	
	<select id="getEnableBandwidth" parameterType="java.util.Map" resultType="HashMap">
		SELECT ifnull(${bandwidth} - sum(gbr), ${bandwidth}) usableBW, ifnull(sum(gbr), 0) usedBW 
		FROM broadcast_info a inner join schedule b on a.BCID = b.BCID 
		where CONCAT(',', said, ',') REGEXP CONCAT(',', #{searchString}, ',')
		and (now() <![CDATA[ > ]]> schedule_start)
		and (now() <![CDATA[ < ]]> schedule_stop)
		and del_yn = 'N'
	</select>
	
	<insert id = "insertMoodRequest" parameterType="HashMap">
		INSERT INTO mood_request
		(	 
			transaction, agentKey, crsId, serviceId, saId, countUC, countBC, timestamp, insertDate 
		)
		VALUES
		(	  
			#{transaction}, #{agentKey}, #{crsId}, #{serviceId}, #{saId}, ${countUC}, ${countBC}, #{timestamp}, now() 
		)
	</insert>
	
	<insert id = "addScheduleWithInitContent" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO schedule
		(	 
			bmscId,
			<if test="type == 'national'">service_area_id, national_yn, </if>
			<if test="type == 'emergency'">service_area_id, national_yn, emergency_yn, </if>
			<if test="type == 'area'">service_area_id, </if>
			<if test="type == 'group'">service_group_id, </if> 
			content_id, name, 
			start_date, end_date
		)
		VALUES
		(	  
			#{bmscId},
			<if test="type == 'national'">#{serviceAreaId}, 'Y', </if>
			<if test="type == 'emergency'">#{serviceAreaId}, 'Y', 'Y', </if>
			<if test="type != 'national' and type != 'emergency'">#{serviceAreaId}, </if>
			#{contentId}, #{titleName}, 
			str_to_date(#{startTime}, '%Y%m%d%H%i%s'), 
			str_to_date(#{endTime}, '%Y%m%d%H%i%s') 
		)
	</insert>
	
	<update id = "modifyScheduleTime" parameterType="java.util.Map">
		UPDATE schedule	SET
			start_date = #{startTime} 
			, end_date = #{endTime}
			, updated_at = now()
		WHERE id = #{scheduleId}
	</update>
		
	<insert id = "insertBroadcastInfo" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="BCID">
		INSERT INTO broadcast_info(
			  transactionId
			, serviceId 
			, service
			, service_name
			, serviceClass
			, serviceNameLanguage
			, language
			, GBR
			, QCI
			, level
			, preEmptionCapabiity
			, preEmptionVulnerability
			, fecType
			, fecRatio
			, segmentAvailableOffset
			, said
			, schedule_start
			, schedule_stop
			, frOffsetTime
			, frRandomTime
			, reportType
			, offsetTime
			, randomTime
			, fileURI
			, deliveryInfo_start
			, deliveryInfo_end
			, mpdURI
			, samplePercentage
			, retrieve_interval
			<if test="serviceType == 'streaming'">, serviceMode</if>
			<if test="serviceMode == 'MooD'">
			, bcServiceArea
			, moodLocation
			, moodReportClientId
			, moodReportInterval
			, moodOffsetTime
			, moodRandomTimePeriod
			, moodSamplePercentage
			, reportClientId
			, UCThreshold
			, BCThreshold
			</if>
			, fileRepair
			, receptionReport
		) VALUES (#{transactionId}
			, #{serviceId}
			, #{serviceType}
			, #{name}
			, #{serviceClass}
			, #{serviceNameLanguage}
			, #{serviceLanguage}
			, #{GBR}
			, #{QCI}
			, #{level}
			, #{preEmptionCapabiity}
			, #{preEmptionVulnerability}
			, #{fecType}
			, #{fecRatio}
			, #{segmentAvailableOffset}
			, #{serviceAreaId}
			, str_to_date(#{schedule_start}, '%Y%m%d%H%i%s')
			, str_to_date(#{schedule_stop}, '%Y%m%d%H%i%s')
			, #{frOffsetTime}
			, #{frRandomTime}
			, #{reportType}
			, #{offsetTime}
			, #{randomTime}
			, #{fileURI}
			, str_to_date(#{deliveryInfo_start}, '%Y%m%d%H%i%s')
			, str_to_date(#{deliveryInfo_end}, '%Y%m%d%H%i%s')
			, #{mpdURI}
			, #{samplePercentage}
			, #{retrieveInterval}
			<if test="serviceType == 'streaming'">, #{serviceMode}</if>
			<if test="serviceMode == 'MooD'">
			, #{bcServiceArea}
			, #{moodLocation}
			, #{reportClientId}
			, #{moodReportInterval}
			, #{moodOffsetTime}
			, #{moodRandomTimePeriod}
			, #{moodSamplePercentage}
			, #{reportClientId}
			, #{UCThreshold}
			, #{BCThreshold}
			</if>
			, #{fileRepair}
			, #{receptionReport}
		)
	</insert>
	
	<update id="updateBroadcastInfo" parameterType="java.util.Map">
		UPDATE broadcast_info SET
			updated_at = now()
				, transactionId		= #{transactionId}
			<if test="name != null and name !=''" >
				, service_name 		= #{name}
			</if>
			<if test="serviceClass != null and serviceClass !=''" >
				, serviceClass 		= #{serviceClass}
			</if>
			<if test="serviceNameLanguage != null and serviceNameLanguage !=''" >
				, serviceNameLanguage			= #{serviceNameLanguage}
			</if>	 
			<if test="serviceLanguage != null and serviceLanguage !=''" >
				, language			= #{serviceLanguage}
			</if>	 
			<if test="GBR != null and GBR !=''" >
				, GBR				= #{GBR}
			</if> 
			<if test="QCI != null and QCI !=''" >
				, QCI				= #{QCI}
			</if>
			<if test="level != null and level !=''" >
				, level				= #{level}
			</if>
			<if test="preEmptionCapabiity != null and preEmptionCapabiity !=''" >
				, preEmptionCapabiity		=#{preEmptionCapabiity}
			</if>
			<if test="preEmptionVulnerability != null and preEmptionVulnerability !=''" >
				, preEmptionVulnerability	=#{preEmptionVulnerability}
			</if>
			<if test="fecType != null and fecType !=''" >
				, fecType			= #{fecType}
			</if>
			<if test="fecRatio != null and fecRatio !=''" >
				, fecRatio			= #{fecRatio}
			</if>
			<if test="segmentAvailableOffset != null and segmentAvailableOffset !=''" >
				, segmentAvailableOffset	=#{segmentAvailableOffset}
			</if>
			<if test="serviceAreaId != null and serviceAreaId !=''" >
				, said				= #{serviceAreaId}
			</if>
			<if test="schedule_start != null and schedule_start !=''" >
				, schedule_start	= str_to_date(#{schedule_start}, '%Y%m%d%H%i%s')
			</if>
			<if test="schedule_stop != null and schedule_stop !=''" >
				, schedule_stop		= str_to_date(#{schedule_stop}, '%Y%m%d%H%i%s')
			</if>
			<if test="reportType != null and reportType !=''" >
				, reportType		= #{reportType}
			</if>
			<if test="frOffsetTime != null and frOffsetTime !=''" >
				, frOffsetTime		= #{frOffsetTime}
			</if>
			<if test="frRandomTime != null and frRandomTime !=''" >
				, frRandomTime		= #{frRandomTime}
			</if>
			<if test="offsetTime != null and offsetTime !=''" >
				, offsetTime		= #{offsetTime}
			</if>
			<if test="randomTime != null and randomTime !=''" >
				, randomTime		= #{randomTime}
			</if>
			<if test="fileURI != null and fileURI !=''" >
				, fileURI			= #{fileURI}
			</if>
			<if test="deliveryInfo_start != null and deliveryInfo_start !=''" >
				, deliveryInfo_start = str_to_date(#{deliveryInfo_start}, '%Y%m%d%H%i%s')
			</if>
			<if test="deliveryInfo_end != null and deliveryInfo_end !=''" >
				, deliveryInfo_end	= str_to_date(#{deliveryInfo_end}, '%Y%m%d%H%i%s')
			</if>
			<if test="mpdURI != null and mpdURI !=''" >
				, mpdURI			= #{mpdURI}
			</if>
			<if test="samplePercentage != null and samplePercentage !=''" >
				, samplePercentage	= #{samplePercentage} 
			</if>
			<if test="samplePercentage != null and samplePercentage !=''" >
				, samplePercentage	= #{samplePercentage} 
			</if>
			<if test="retrieveInterval != null and retrieveInterval !=''" >
				, retrieve_interval	= #{retrieveInterval} 
			</if>
			<if test="serviceMode != null and serviceMode !=''" >
				, serviceMode		= #{serviceMode} 
			</if>
			<if test="moodLocation != null and moodLocation !=''" >
				, moodLocation		= #{moodLocation} 
			</if>
			<if test="reportClientId != null and reportClientId !=''" >
				, moodReportClientId = #{reportClientId} 
			</if>
			<if test="moodReportInterval != null and moodReportInterval !=''" >
				, moodReportInterval = #{moodReportInterval} 
			</if>
			<if test="moodOffsetTime != null and moodOffsetTime !=''" >
				, moodOffsetTime = #{moodOffsetTime} 
			</if>
			<if test="moodRandomTimePeriod != null and moodRandomTimePeriod !=''" >
				, moodRandomTimePeriod = #{moodRandomTimePeriod} 
			</if>
			<if test="moodSamplePercentage != null and moodSamplePercentage !=''" >
				, moodSamplePercentage = #{moodSamplePercentage} 
			</if>
			<if test="UCThreshold != null and UCThreshold !=''" >
				, UCThreshold = #{UCThreshold} 
			</if>
			<if test="BCThreshold != null and BCThreshold !=''" >
				, BCThreshold = #{BCThreshold} 
			</if>
			<if test="fileRepair != null and fileRepair !=''" >
				, fileRepair = #{fileRepair} 
			</if>
			<if test="receptionReport != null and receptionReport !=''" >
				, receptionReport = #{receptionReport} 
			</if>
			<if test="reportClientId != null and reportClientId !=''" >
				, reportClientId = #{reportClientId} 
			</if>
		WHERE 1=1
		AND BCID = #{BCID}
	</update>
	
	<select id="selectBroadcast" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			BCID
			, serviceId
			, service_name 		as name
			, transactionId		
			, serviceClass 			 
			, serviceNameLanguage 
			, language			as serviceLanguage 
			, GBR	
			, QCI	
			, level	
			, preEmptionCapabiity	
			, preEmptionVulnerability
			, fecType			
			, fecRatio			
			, segmentAvailableOffset
			, said				
			, DATE_FORMAT(schedule_start, '%Y%m%d%H%i%s') schedule_start
			, DATE_FORMAT(schedule_stop,  '%Y%m%d%H%i%s') schedule_stop
			, reportType		
			, offsetTime	
			, randomTime	
			, fileURI	
			, DATE_FORMAT(deliveryInfo_start, '%Y%m%d%H%i%s') deliveryInfo_start
			, DATE_FORMAT(deliveryInfo_end,   '%Y%m%d%H%i%s') deliveryInfo_end	
			, mpdURI			
			, samplePercentage	 
			, retrieve_interval	 
			, serviceMode
			, bcServiceArea
			, moodLocation
			, moodReportClientId
			, moodReportInterval
			, moodOffsetTime
			, moodRandomTimePeriod
			, moodSamplePercentage
			, UCThreshold
			, BCThreshold
			, fileRepair
			, receptionReport
			, reportClientId
		FROM broadcast_info 
		WHERE 1=1 AND 
		<choose>
		<when test="BCID == null or BCID == ''">
			serviceId = #{serviceId}
		</when>
		<otherwise>
			BCID = #{BCID}
		</otherwise>
		</choose>
	</select>
	
	<select id="selectBroadcastToday" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			distinct serviceClass
		FROM broadcast_info 
		WHERE schedule_start > #{searchDate}
	</select>
	
	<update id = "updateSchedule" parameterType="java.util.Map">
		UPDATE schedule	
		SET
<!-- 			<if test="serviceGroupId != '' and serviceGroupId != null"> -->
			service_area_id = #{serviceAreaId},
<!-- 			</if> -->
			name = #{name},
			BCID = #{BCID},
			start_date = str_to_date(#{schedule_start}, '%Y%m%d%H%i%s'),
			end_date = str_to_date(#{schedule_stop}, '%Y%m%d%H%i%s'),
			updated_at = now()
		WHERE id = #{id}
	</update>
	
	<insert id="insertAddSchedule" parameterType="java.util.Map">
		INSERT INTO schedule(bmscId, service_area_id, content_id, BCID, name, start_date, end_date)
		SELECT bmscId, #{serviceAreaId}, content_id, BCID, name, start_date, end_date 
		FROM  schedule 
		WHERE id =#{id}
	</insert>
	
	<delete id="deleteScheduleContent" parameterType="HashMap">
		delete from schedule_contents 
		WHERE schedule_id = #{id}
	</delete>
	
	<insert id="insertScheduleContent" parameterType="java.util.Map">
		INSERT INTO schedule_contents
		(
			schedule_id, content_id, cancelled, changed, 
			<if test="fileURI != null">url,</if>
			<if test="mpdURI != null">mpd,</if>
			<if test="startTime != null">start_time,</if>
			<if test="endTime != null">end_time,</if> 
			<if test="serviceType == 'streaming' and serviceMode != 'BC'">
				r12mpdURI, bcBasePattern,
			</if>
			created_at, updated_at
		)
		values
		(
			${scheduleId}, ${contentId}, 0, 0,
			<if test="fileURI != null">#{fileURI},</if>
			<if test="mpdURI != null">#{mpdURI},</if>
			<if test="startTime != null">#{startTime},</if>
			<if test="endTime != null">#{endTime},</if> 
			<if test="serviceType == 'streaming' and serviceMode != 'BC'">
				#{r12MpdURI}, #{bcBasePattern},
			</if>
			now(), now()
		)
	</insert>
	
	<update id = "updateSchedule4Del" parameterType="java.util.Map">
		UPDATE schedule	SET
			del_yn = 'Y',
			updated_at = now() 
		WHERE id = #{id}
	</update>
	<!--  inbo 작성 쿼리 끝  -->

	<select id="checkBandwidth" parameterType="java.util.Map" resultType="java.util.Map">
		select said, bandwidth, type from 
		(
			select circle_id as said, bandwidth, 'circle' as type from circle
			where circle_id IN (${saidList})
			
			union all
			
			select city_id as said, bandwidth, 'city' as type from city
			where city_id IN (${saidList})
			
			union all
			
			select hotspot_id as said, bandwidth, 'hotspot' as type from hotspot 
			where hotspot_id IN (${saidList})
		) T
	</select>

	<select id="selectSaidRange" parameterType="java.util.Map" resultType="String">
		select #{said}
		union all
		<if test="type == 'circle'">
			select city_id said from city where circle_id = #{said}
			union all
			select hotspot_id said from hotspot where city_id IN (select city_id from city where circle_id = #{said})
		</if>
		<if test="type == 'city'">
			select circle_id said from city where city_id = #{said}
			union all
			select hotspot_id said from hotspot where city_id IN (select city_id from city where city_id = #{said})
		</if>
		<if test="type == 'hotspot'">
			select city_id said from hotspot where hotspot_id = #{said}
			union all
			select circle_id said from city where city_id = (select city_id said from hotspot where hotspot_id = #{said})
		</if>
	</select>
	
	<select id="getGroupListFromCircleId" parameterType="HashMap" resultType="HashMap">
		select * from service_area_group
		where circle_id = #{circleId}
	</select>
	
	<select id="getGroupSaidList" parameterType="HashMap" resultType="HashMap">
		select * from service_area_group_sub
		where group_id = #{cityId}
	</select>
	
	<select id="checkExistSaid" parameterType="java.util.Map" resultType="int">
		select count(*) from 
		(
			select circle_id as said, bandwidth from circle
			where circle_id = ${said}
			
			union all
			
			select city_id as said, bandwidth from city
			where city_id = ${said}
			
			union all
			
			select hotspot_id as said, bandwidth from hotspot 
			where hotspot_id = ${said}
		) T
	</select>
	
	<select id="selectMoodRequestInfo" parameterType="java.util.Map" resultType="java.util.Map">
		select * from mood_request
		where insertDate > date_add(now(), interval-${interval} minute)
		order by id desc 
	</select>
	
	<select id="selectMoodServiceId" parameterType="java.util.Map" resultType="String">
		select serviceId from mood_request
		where insertDate > date_add(now(), interval-${interval} minute)
		group by serviceId
		order by id desc 
	</select>
	
	<select id="selectCrsLimit" resultType="java.util.Map">
		select * from crs_limit
	</select>
	
	<select id="getBcIdFromServiceId" parameterType="java.util.Map" resultType="String">
		select a.BCID from broadcast_info a inner join schedule b on a.BCID = b.BCID and b.del_yn = 'N'
		where a.serviceId = #{serviceId}
	</select>
	
	<select id="getScheduleIdFromBCID" parameterType="java.util.Map" resultType="String">
		select id from schedule
		where BCID = #{BCID}
	</select>
	
	<select id="getCrsInfo" parameterType="HashMap" resultType="HashMap">
		select id, ip, updateUrl, moodUsageDataReportInterval from crs_server_info
		where id = (select crsId from mood_request where serviceId = #{serviceId} and said = #{said} limit 1)
	</select>
	
	<select id="getCrsInfoFromMapping" parameterType="String" resultType="String">
		select CONCAT(id, ',', ip, ',', createUrl) from crs_server_info
		where id = (select crs_id from crs_said_mapping where said = #{said})
	</select>
	
	<select id="checkMoodServiceId" parameterType="java.util.Map" resultType="int">
		select count(*) from broadcast_info
		where service = 'streaming' 
		  and serviceMode = 'MooD'
		  and serviceId = #{serviceId}
		  and (now() <![CDATA[ > ]]> schedule_start)
		  and (now() <![CDATA[ < ]]> schedule_stop)
	</select>
	
	<select id="getCurrentMoodService" parameterType="String" resultType="HashMap">
		select a.serviceId, max(c.timestamp) from 
		broadcast_info a inner join crs_said_mapping b 
		on CONCAT(',', a.said, ',') REGEXP CONCAT(',', b.said, ',') 
		inner join mood_request c on a.serviceId = c.serviceId and b.crs_id = c.crsId
		inner join schedule s on s.BCID = a.BCID
		where service = 'streaming' 
		  and serviceMode = 'MooD'		  
		  and (now() <![CDATA[ > ]]> a.schedule_start)
		  and (now() <![CDATA[ < ]]> a.schedule_stop)
		  and b.crs_id = #{crsId}
		  and s.del_yn = 'N'
		group by a.serviceId
	</select>
	
	<select id="getCurrentMoodServiceOthers" parameterType="HashMap" resultType="HashMap">
		select a.serviceId, max(c.timestamp) from 
		broadcast_info a inner join crs_said_mapping b 
		on CONCAT(',', a.said, ',') REGEXP CONCAT(',', b.said, ',') 
		inner join mood_request c on a.serviceId = c.serviceId and b.crs_id = c.crsId
		inner join schedule s on s.BCID = a.BCID
		where service = 'streaming' 
		  and serviceMode = 'MooD'		  
		  and (now() <![CDATA[ > ]]> a.schedule_start)
		  and (now() <![CDATA[ < ]]> a.schedule_stop)
		  and b.crs_id = #{crsId}
		  and a.serviceId != #{serviceId}
		  and s.del_yn = 'N'
		group by a.serviceId
	</select>
	
	<select id="checkMoodSaId" parameterType="java.util.Map" resultType="int">
		select count(*) from broadcast_info
		where serviceId = #{serviceId}
		  and CONCAT(',', said, ',') REGEXP CONCAT(',', #{saId}, ',')
	</select>
	
	<select id="getThreashold" parameterType="java.util.Map" resultType="java.util.Map">
		select UCThreshold, BCThreshold from broadcast_info a 	      	
	      	inner join schedule b on a.BCID = b.BCID and b.del_yn = 'N'
		where serviceId = #{serviceId}
	</select>
	
	<select id="getMoodRetrieve" parameterType="HashMap" resultType="HashMap">
		select * from broadcast_info a inner join crs_server_info b     
		where serviceId = #{serviceId} and id = #{crsId}
	</select>
	
	<update id="updateSaidMode" parameterType="HashMap">
		update mood_service     
		set mode = 
		<if test="ntype == 'BC'">'Unicast'</if>
		<if test="ntype == 'UC'">'Broadcast'</if>
		, update_dt = now()
		where serviceId = #{serviceId}
		and said = #{said}
	</update>
	
	<insert id="insertMoodService" parameterType="HashMap">
		insert mood_service
		(
			serviceId, said, mode, update_dt
		)
		values
		(
			#{serviceId}, #{said}, #{mode}, now()
		)
	</insert>
	
	<select id="getSendBcSaid" parameterType="java.util.Map" resultType="HashMap">
		select said, ntype from (
			select * from
			( select serviceId, said, sum(Atype) as aCnt, sum(Btype) as bCnt, ntype
			 from
			 (select serviceId, said, ntype,
			 case when castMode ='A' then castCnt else 0 end as 'Atype', 
			 case when castMode ='B' then castCnt else 0 end as 'Btype'
			 from
			 ( select distinct serviceId, said, castMode, count(castMode) as castCnt, ntype
			 from
			 (
			  	select serviceId, said,  case when countUC <![CDATA[ > ]]> ${UCThreshold} then 'A' else 'B' end as castMode,
			  	'UC' as ntype
				from mood_request a
				where insertDate <![CDATA[ > ]]> date_add(now(), interval-${interval} minute)
				and (select mode from mood_service where serviceId = #{serviceId} and said = a.said) = 'Unicast'
				and (select ifnull(update_dt, '1999-12-31') from mood_service where said = a.said) <![CDATA[ < ]]> date_add(now(), interval-${interval} minute)
			 ) K
			  group by serviceId, said, castMode, ntype ) T ) H
			  group by serviceId, said, ntype ) Q
			where aCnt <![CDATA[ > ]]> 0
			union all
			select * from
			( select serviceId, said, sum(Atype) as aCnt, sum(Btype) as bCnt, ntype
			 from
			 (select serviceId, said, ntype, 
			 case when castMode ='A' then castCnt else 0 end as 'Atype', 
			 case when castMode ='B' then castCnt else 0 end as 'Btype'
			 from
			 ( select distinct serviceId, said, castMode, count(castMode) as castCnt, ntype
			  from
			  (select serviceId, said,  case when countBC <![CDATA[ < ]]> ${BCThreshold} then 'A' else 'B' end as castMode
			  ,'BC' as ntype
			from mood_request a
			where insertDate <![CDATA[ > ]]>date_add(now(), interval-${interval} minute)
			and (select mode from mood_service where serviceId = #{serviceId} and said = a.said) = 'Broadcast'
			and (select ifnull(update_dt, '1999-12-31') from mood_service where said = a.said) <![CDATA[ < ]]> date_add(now(), interval-${interval} minute)
			 ) K
			  group by serviceId, said, castMode, ntype ) T ) H
			  group by serviceId, said, ntype ) Q
			where aCnt <![CDATA[ > ]]> 0) T
		where serviceId = #{serviceId}
	</select>

  <resultMap id="BaseResultMap" type="com.catenoid.dashbd.dao.model.Schedule" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
    <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, start_date, end_date, created_at, updated_at
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.catenoid.dashbd.dao.model.ScheduleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from schedule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from schedule
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from schedule
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.catenoid.dashbd.dao.model.ScheduleExample" >
    delete from schedule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.catenoid.dashbd.dao.model.Schedule" >
    insert into schedule (id, name, start_date, end_date, 
      created_at, updated_at)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{startDate,jdbcType=TIMESTAMP}, #{endDate,jdbcType=TIMESTAMP},
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.catenoid.dashbd.dao.model.Schedule" >
    insert into schedule
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="startDate != null" >
        start_date,
      </if>
      <if test="endDate != null" >
        end_date,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.catenoid.dashbd.dao.model.ScheduleExample" resultType="java.lang.Integer" >
    select count(*) from schedule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update schedule
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.startDate != null" >
        start_date = #{record.startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endDate != null" >
        end_date = #{record.endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdAt != null" >
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null" >
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update schedule
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      start_date = #{record.startDate,jdbcType=TIMESTAMP},
      end_date = #{record.endDate,jdbcType=TIMESTAMP},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.catenoid.dashbd.dao.model.Schedule" >
    update schedule
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null" >
        start_date = #{startDate,jdbcType=TIMESTAMP},
      </if>
      <if test="endDate != null" >
        end_date = #{endDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.catenoid.dashbd.dao.model.Schedule" >
    update schedule
    set name = #{name,jdbcType=VARCHAR},
      start_date = #{startDate,jdbcType=TIMESTAMP},
      end_date = #{endDate,jdbcType=TIMESTAMP},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>



