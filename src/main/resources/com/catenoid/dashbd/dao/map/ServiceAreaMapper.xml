<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.catenoid.dashbd.dao.ServiceAreaMapper" >
  <resultMap id="BaseResultMap" type="com.catenoid.dashbd.dao.model.ServiceArea" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="bandwidth" property="bandwidth" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="city" property="city" jdbcType="VARCHAR" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="SystemIncomingLog" type="com.catenoid.dashbd.dao.model.SystemIncomingLog" >
	<result column="rownum" property="rownum" jdbcType="INTEGER" />
	<result column="req_type" property="reqType" jdbcType="VARCHAR" />
	<result column="success_count" property="successCount" jdbcType="INTEGER" />
	<result column="fail_count" property="failCount" jdbcType="INTEGER" />
	<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="SystemDatabaseBackup" type="com.catenoid.dashbd.dao.model.SystemDatabaseBackup" >
	<result column="rownum" property="rownum" jdbcType="INTEGER" />
	<result column="backupId" property="backupId" jdbcType="INTEGER" />
	<result column="backupFileName" property="backupFileName" jdbcType="VARCHAR" />
	<result column="backupFilePath" property="backupFilePath" jdbcType="VARCHAR" />
	<result column="backupCreatedId" property="backupCreatedId" jdbcType="VARCHAR" />
	<result column="backupCreatedAt" property="backupCreatedAt" jdbcType="TIMESTAMP" />
	<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
  </resultMap>
  
  <resultMap id="ServiceAreaEnbApMap" type="com.catenoid.dashbd.dao.model.ServiceAreaEnbAp" >
  	<id column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
  	<result column="service_area_bandwidth" property="serviceAreaBandwidth" jdbcType="BIGINT" />
  	<result column="service_area_name" property="serviceAreaName" jdbcType="VARCHAR" />
  	<result column="service_area_city" property="serviceAreaCity" jdbcType="VARCHAR" />
  	<result column="enb_ap_id" property="enbApId" jdbcType="INTEGER" />
  	<result column="enb_ap_name" property="enbApName" jdbcType="VARCHAR" />
  	<result column="longitude" property="longitude" jdbcType="DECIMAL" />
  	<result column="latitude" property="latitude" jdbcType="DECIMAL" />
  	<result column="plmn" property="plmn" jdbcType="VARCHAR" />
  	<result column="mbsfn" property="mbsfn" jdbcType="VARCHAR" />
  	<result column="map_city" property="mapCity" jdbcType="VARCHAR" />
  	<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
  </resultMap>
  
	<resultMap id="ServiceAreaByBmSc" type="com.catenoid.dashbd.dao.model.BmscServiceArea" >
		<result column="bmsc_id" property="bmscId" jdbcType="INTEGER" />
		<result column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="OperatorServiceArea" type="com.catenoid.dashbd.dao.model.Operator" >
		<result column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="BmscServiceArea" type="com.catenoid.dashbd.dao.model.Bmsc" >
		<result column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="cicle" property="circle" jdbcType="VARCHAR" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="ServiceAreaEnbAp" type="com.catenoid.dashbd.dao.model.ServiceAreaEnbAp" >
		<id column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="service_area_bandwidth" property="bandwidth" jdbcType="DECIMAL" />
		<result column="service_area_name" property="serviceAreaName" jdbcType="VARCHAR" />
		<result column="service_area_city" property="serviceAreaCity" jdbcType="VARCHAR" />
		<result column="enb_ap_id" property="enbApId" jdbcType="INTEGER" />
		<result column="enb_ap_name" property="enbApName" jdbcType="VARCHAR" />
		<result column="longitude" property="longitude" jdbcType="DECIMAL" />
		<result column="latitude" property="latitude" jdbcType="DECIMAL" />
		<result column="plmn" property="plmn" jdbcType="VARCHAR" />
		<result column="mbsfn" property="mbsfn" jdbcType="VARCHAR" />
  		<result column="map_city" property="mapCity" jdbcType="VARCHAR" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="ServiceAreaPermissionAp" type="com.catenoid.dashbd.dao.model.ServiceAreaPermissionAp" >
		<id column="permissionId" property="permissionId" jdbcType="INTEGER" />
		<result column="rownum" property="rownum" jdbcType="INTEGER" />
		<result column="permissionName" property="permissionName" jdbcType="VARCHAR" />
		<result column="permissionCount" property="permissionCount" jdbcType="INTEGER" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="ServiceAreaCount" type="com.catenoid.dashbd.dao.model.ServiceAreaCount" >
		<result column="bmsc_id" property="bmscId" jdbcType="INTEGER" />
		<result column="city" property="city" jdbcType="VARCHAR" />
		<result column="count" property="count" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="ServiceAreaByBmScCity" type="com.catenoid.dashbd.dao.model.BmscServiceArea" >
		<result column="bmsc_id" property="bmscId" jdbcType="INTEGER" />
		<result column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="service_area_name" property="serviceAreaName" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="ScheduleSummaryByServiceArea" type="com.catenoid.dashbd.dao.model.ScheduleSummary" >
		<result column="id" property="scheduleId" jdbcType="INTEGER" />
		<result column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="content_id" property="contentId" jdbcType="INTEGER" />
		<result column="bcid" property="bcId" jdbcType="INTEGER" />
		<result column="name" property="scheduleName" jdbcType="VARCHAR" />
		<result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
		<result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
		<result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
		<result column="del_yn" property="delYn" jdbcType="VARCHAR" />
		<result column="thumbnail" property="thumbnail" jdbcType="VARCHAR" />
		<result column="progress_rate" property="progressRate" jdbcType="DECIMAL" />
		<result column="left_time" property="leftTime" jdbcType="VARCHAR" />
		<result column="service_type" property="serviceType" jdbcType="VARCHAR" />
		<result column="category" property="category" jdbcType="VARCHAR" />
		<result column="url" property="url" jdbcType="VARCHAR" />
		
	</resultMap>

	<resultMap id="ServiceAreaByBmScId" type="com.catenoid.dashbd.dao.model.BmscServiceArea" >
		<result column="bmsc_id" property="bmscId" jdbcType="INTEGER" />
		<result column="service_area_id" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="service_area_name" property="serviceAreaName" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>	
	

	<resultMap id="SystemBroadCastContents" type="com.catenoid.dashbd.dao.model.SystemBroadCastContents" >
		<result column="rownum" property="rownum" jdbcType="INTEGER" />
		<result column="schId" property="schId" jdbcType="INTEGER" />
		<result column="bmscid" property="bmscid" jdbcType="INTEGER" />
		<result column="bmscName" property="bmscName" jdbcType="VARCHAR" />
		<result column="serviceAreaId" property="serviceAreaId" jdbcType="INTEGER" />
		<result column="serviceAreaName" property="serviceAreaName" jdbcType="VARCHAR" />
		<result column="contentId" property="contentId" jdbcType="INTEGER" />
		<result column="contentName" property="contentName" jdbcType="VARCHAR" />
		<result column="operatorId" property="operatorId" jdbcType="INTEGER" />
		<result column="operatorName" property="operatorName" jdbcType="VARCHAR" />
		<result column="serviceCategory" property="serviceCategory" jdbcType="VARCHAR" />
		<result column="fileType" property="fileType" jdbcType="VARCHAR" />
		<result column="fileFormat" property="fileFormat" jdbcType="VARCHAR" />
		<result column="serviceType" property="serviceType" jdbcType="VARCHAR" />
		<result column="fileFormat" property="fileFormat" jdbcType="VARCHAR" />
		<result column="startDate" property="startDate" jdbcType="TIMESTAMP" />
		<result column="endDate" property="endDate" jdbcType="TIMESTAMP" />
		<result column="createdAt" property="createdAt" jdbcType="TIMESTAMP" />
		<result column="updatedAt" property="updatedAt" jdbcType="TIMESTAMP" />
		<result column="totalCount" property="totalCount" jdbcType="INTEGER" />
	</resultMap>
		
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="and" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="or" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  or ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  or ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  or ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  or ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, bandwidth, name, city, created_at, updated_at
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.catenoid.dashbd.dao.model.ServiceAreaExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from service_area
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from service_area
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectServiceAreaEnbAp" resultMap="ServiceAreaEnbApMap" parameterType="com.catenoid.dashbd.dao.model.ServiceAreaExample" >
  	select 
	t1.service_area_id, t3.bandwidth as service_area_bandwidth, 
	t3.name as service_area_name, 
	t3.city as service_area_city,
	enb_ap_id, t2.name as enb_ap_name, 
	t2.longitude as longitude, 
	t2.latitude as latitude, 
	t2.plmn as plmn,
	t2.mbsfn as mbsfn,
	t2.city as map_city,
	t1.created_at, t1.updated_at
	from service_area_enb_ap t1, enb_ap t2, service_area t3
	<if test="_parameter != null" >
      <include refid="Where_Clause" />
    </if>
    and t1.enb_ap_id = t2.id
    and t1.service_area_id = t3.id
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectServiceAreaEnbApRangeOuterJoin" resultMap="ServiceAreaEnbApMap" parameterType="com.catenoid.dashbd.dao.model.ServiceAreaExample" >
  	select 
	t1.service_area_id, 
    (select bandwidth from service_area where id=t1.service_area_id limit 1) as service_area_bandwidth, 
	(select name from service_area where id=t1.service_area_id limit 1)  as service_area_name, 
	(select city from service_area where id=t1.service_area_id limit 1)  as service_area_city,
	t2.id as enb_ap_id, t2.name as enb_ap_name, 
	t2.longitude as longitude, 
	t2.latitude as latitude, 
	t2.plmn as plmn,
	t2.mbsfn as mbsfn,
	t2.city as map_city,
	t1.created_at, t1.updated_at
	from 	service_area_enb_ap t1 right outer join enb_ap t2 on t1.enb_ap_id = t2.id
	<if test="_parameter != null" >
      <include refid="Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from service_area
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.catenoid.dashbd.dao.model.ServiceAreaExample" >
    delete from service_area
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
    insert into service_area (id, bandwidth, name, city, 
      created_at, updated_at)
    values (#{id,jdbcType=INTEGER}, #{bandwidth,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP})
    <selectKey resultType="int" keyProperty="id" order="AFTER"> 
         SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
    insert into service_area
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="bandwidth != null" >
      	bandwidth,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="city != null" >
        city,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bandwidth != null" >
      	#{bandwidth,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="city != null" >
        #{city,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
    <selectKey resultType="int" keyProperty="id" order="AFTER"> 
         SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.catenoid.dashbd.dao.model.ServiceAreaExample" resultType="java.lang.Integer" >
    select count(*) from service_area
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update service_area
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.bandwidth != null" >
      	bandwidth = #{record.bandwidth,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.city != null" >
        city = #{record.city,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null" >
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
        updated_at = now(),
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update service_area
    set id = #{record.id,jdbcType=INTEGER},
      bandwidth = #{record.bandwidth,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      city = #{record.city,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = now()
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
    update service_area
    <set >
      <if test="bandwidth != null" >
      	bandwidth = #{bandwidth,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="city != null" >
        city = #{city,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
        updated_at = now(),
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
    update service_area
    set bandwidth = #{bandwidth,jdbcType=INTEGER}, 
      name = #{name,jdbcType=VARCHAR},
      city = #{city,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = now()
    where id = #{id,jdbcType=INTEGER}
  </update>
  

	<select id="getSeviceAreaByBmSc" resultMap="ServiceAreaByBmSc" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
		select
			bmsc_id, service_area_id, created_at, updated_at
			, (select count(*) from bmsc_service_area where 1 = 1 and bmsc_id = #{bmscId,jdbcType=INTEGER}) as totalCount
		from 
			bmsc_service_area
		where 1 = 1 
			and bmsc_id = #{bmscId,jdbcType=INTEGER}
		order by length(service_area_id), service_area_id
		limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	
	<select id="getServiceAreaOperator" resultMap="OperatorServiceArea" parameterType="com.catenoid.dashbd.dao.model.OperatorSearchParam" >
		select
			id, circle_name, town_name, town_code, latitude, longitude, description, permission, created_at as createdAt, updated_at as updatedAt
			, (select count(*) from operator where 1 = 1) as totalCount
		from 
			operator
		where 1 = 1 
		order by length(id), id
		limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	
	<select id="getServiceAreaOperator1" resultType="HashMap" parameterType="com.catenoid.dashbd.dao.model.OperatorSearchParam" >
		select
			id, circle_name, town_name, town_code, latitude, longitude, description, permission, created_at as createdAt, updated_at as updatedAt
			, (select count(*) from operator where 1 = 1) as totalCount
		from 
			operator
		where 1 = 1 
		order by length(id), id
		limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	
	<select id="getSeviceAreaBmSc" resultMap="BmscServiceArea" parameterType="com.catenoid.dashbd.dao.model.OperatorSearchParam" >
		select
			y.id, y.name, y.circle, y.created_at, y.updated_at
			, (select count(*) from operator_bmsc x, bmsc y where 1 = 1 and x.operator_id = #{operatorId,jdbcType=INTEGER} and y.id = x.bmsc_id) as totalCount
		from 
			operator_bmsc x, bmsc y
		where 1 = 1 
			and x.operator_id = #{operatorId,jdbcType=INTEGER}
			and y.id = x.bmsc_id
		order by length(y.id), y.id
		limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	
	<select id="getServiceAreaEnbAp" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
	select 
		t1.service_area_id, t3.bandwidth as service_area_bandwidth, 
		t3.name as service_area_name, 
		t3.city as service_area_city,
		enb_ap_id, t2.name as enb_ap_name, 
		t2.longitude as longitude, 
		t2.latitude as latitude, 
		t2.plmn as plmn,
		t2.mbsfn as mbsfn,
		t1.created_at, t1.updated_at,
		t2.city as map_city
		, 1 as totalCount
	from 
		service_area_enb_ap t1, enb_ap t2, service_area t3
	where 1 = 1
		<if test="serviceAreaId != null" >
		and t1.service_area_id = #{serviceAreaId,jdbcType=INTEGER}
		</if>
		and t1.enb_ap_id = t2.id
		<if test="bmscId != null" >
		and t2.bmsc_id = #{bmscId,jdbcType=INTEGER}
		</if>
		and t1.service_area_id = t3.id
	order by length(t1.enb_ap_id), t1.enb_ap_id
	</select>
	
	<select id="getEnbsList" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
	SELECT
		enbApId, enbApName, longitude, latitude, plmn, circle, circleName, clusterId, ipaddress,
		earfcn, mbsfn, mbmsServiceAreaId, createdAt, updatedAt,
		city, bandwidth, operatorId, bmscId,
		(select count(*) from enb_ap where operator_id = #{operatorId} and bmsc_id = #{bmscId}
			<if test="toSearchTxt != null and toSearchTxt != ''">
				and (id LIKE CONCAT('%', #{toSearchTxt}, '%') or name LIKE CONCAT('%', #{toSearchTxt}, '%') )
			</if>
		) as totalCount
	FROM 
	( 
		SELECT
			@ROWNUM := @ROWNUM + 1 AS rownum,
			enbApId, enbApName, longitude, latitude, plmn, circle, circleName, clusterId, ipaddress,
			earfcn, mbsfn, mbmsServiceAreaId, createdAt, updatedAt,
			city, bandwidth, operatorId, bmscId
		FROM 
		( SELECT @ROWNUM := 0 AS rownum ) R,
		( 	
			SELECT
				id as enbApId, name as enbApName, longitude, latitude, plmn, circle, circle_name as circleName, 
				cluster_id as clusterId, ipaddress, earfcn, mbsfn, mbms_service_area_id as mbmsServiceAreaId, 
				created_at as createdAt, updated_at as updatedAt, city, bandwidth, 
				operator_id as operatorId, bmsc_id as bmscId
			FROM enb_ap
			WHERE 
				operator_id = #{operatorId}
				and bmsc_id = #{bmscId}
			<if test="toSearchTxt != null and toSearchTxt != ''">
				and (id LIKE CONCAT('%', #{toSearchTxt}, '%') or name LIKE CONCAT('%', #{toSearchTxt}, '%') )
			</if>
			ORDER BY 	<if test="sort == null">id</if>
						<if test="sort != null">
							<if test="sort == 'id'">id</if>
							<if test="sort == 'name'">name</if>
							<if test="sort == 'city'">city</if>
							${order}
						</if> 
		) T
	) R
	WHERE rownum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="getServiceAreaEnbApWithBounds" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
		select 
			ifnull( t1.service_area_id, '' ) as service_area_id, 
			ifnull( t1.service_area_name, '' ) as service_area_name, 
			t2.bandwidth as service_area_bandwidth, 
			t2.city as service_area_city,
			t2.id as enb_ap_id, 
			t2.name as enb_ap_name, 
			t2.longitude as longitude, 
			t2.latitude as latitude, 
			t2.plmn as plmn,
			t2.mbsfn as mbsfn,
			t2.created_at, 
			t2.updated_at
			, 0 as totalCount
		from 
			(
				select * from enb_ap
				where 1 = 1
					and latitude between #{swLat} and #{neLat}
					and longitude between #{swLng} and #{neLng}
					and bmsc_id = #{bmscId,jdbcType=INTEGER}
			) t2 inner join
			( 
				select t3.id as service_area_id, t3.name as service_area_name, t1.enb_ap_id
				from 
					service_area_enb_ap t1, 
					service_area t3
				where 
					1 = 1
					and t3.id = #{serviceAreaId,jdbcType=INTEGER}
					and t1.service_area_id = t3.id 
			) t1
		on 1 = 1
			and t1.enb_ap_id = t2.id
		union all
		select 
			ifnull( t1.service_area_id, '' ) as service_area_id, 
			ifnull( t1.service_area_name, '' ) as service_area_name, 
			t2.bandwidth as service_area_bandwidth, 
			t2.city as service_area_city,
			t2.id as enb_ap_id, 
			t2.name as enb_ap_name, 
			t2.longitude as longitude, 
			t2.latitude as latitude, 
			t2.plmn as plmn,
			t2.mbsfn as mbsfn,
			t2.created_at, 
			t2.updated_at
			, 0 as totalCount
		from 
			(
				select * from enb_ap
				where 1 = 1
					and latitude between #{swLat} and #{neLat}
					and longitude between #{swLng} and #{neLng}
					and bmsc_id = #{bmscId,jdbcType=INTEGER}
					and not exists (select enb_ap_id from service_area_enb_ap x where x.service_area_id = #{serviceAreaId,jdbcType=INTEGER} and x.enb_ap_id = id)
			) t2 left join
			( 
				select t3.id as service_area_id, t3.name as service_area_name, t1.enb_ap_id
				from 
					service_area_enb_ap t1, 
					service_area t3, 
					(
						select enb_ap_id, max(service_area_id) as service_area_id, count(*) 
						from service_area_enb_ap 
						where 
							1 = 1 
							and service_area_id != #{serviceAreaId,jdbcType=INTEGER}
						group by enb_ap_id
					) t4
				where 
					1 = 1
					and t1.service_area_id != #{serviceAreaId,jdbcType=INTEGER}
					and t4.service_area_id = t1.service_area_id
					and t4.enb_ap_id = t1.enb_ap_id
					and t1.service_area_id = t3.id 
			) t1
		on 1 = 1
			and t1.enb_ap_id = t2.id
	</select>
	
	<!-- 
	<select id="getServiceAreaEnbApOther" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
		select 
			t1.service_area_id, t3.bandwidth as service_area_bandwidth, 
			t3.name as service_area_name, 
			t3.city as service_area_city,
			t1.enb_ap_id, t2.name as enb_ap_name, 
			t2.longitude as longitude, 
			t2.latitude as latitude, 
			t2.plmn as plmn,
			t2.mbsfn as mbsfn,
			t1.created_at, t1.updated_at
			, (select sum(cnt) from (
			select 1 as cnt from service_area_enb_ap t1, enb_ap t2, service_area t3 
			where 1 = 1 
			and t1.service_area_id != #{serviceAreaId,jdbcType=INTEGER}
			and t1.enb_ap_id = t2.id
			and t1.service_area_id = t3.id
			and t2.latitude between #{swLat} and #{neLat}
			and t2.longitude between #{swLng} and #{neLng}
			and not exists (select enb_ap_id from service_area_enb_ap x where x.service_area_id = #{serviceAreaId,jdbcType=INTEGER} and x.enb_ap_id = t1.enb_ap_id)
			group by t1.enb_ap_id) y) as totalCount
		from 
			service_area_enb_ap t1, enb_ap t2, service_area t3,
			(select enb_ap_id, max(service_area_id) as service_area_id, count(*) 
				from service_area_enb_ap
			where
				service_area_id != #{serviceAreaId,jdbcType=INTEGER}
			group by enb_ap_id) t4
		where 1 = 1
			and t1.service_area_id != #{serviceAreaId,jdbcType=INTEGER}
			and t4.service_area_id = t1.service_area_id
			and t4.enb_ap_id = t1.enb_ap_id
			and t1.enb_ap_id = t2.id
			and t2.latitude between #{swLat} and #{neLat}
			and t2.longitude between #{swLng} and #{neLng}
			and t1.service_area_id = t3.id
			and not exists (select enb_ap_id from service_area_enb_ap x where x.service_area_id = #{serviceAreaId,jdbcType=INTEGER} and x.enb_ap_id = t1.enb_ap_id)
	</select>
	-->
	
	<select id="getServiceAreaEnbApOther" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
		select 
			ifnull( t1.service_area_id, '' ) as service_area_id, 
			ifnull( t1.service_area_name, '' ) as service_area_name, 
			t2.bandwidth as service_area_bandwidth, 
			t2.city as service_area_city,
			t2.id as enb_ap_id, 
			t2.name as enb_ap_name, 
			t2.longitude as longitude, 
			t2.latitude as latitude, 
			t2.plmn as plmn,
			t2.mbsfn as mbsfn,
			t2.created_at, 
			t2.updated_at
			, 0 as totalCount
		from 
			(
				select * from enb_ap
				where 1 = 1
					and latitude between #{swLat} and #{neLat}
					and longitude between #{swLng} and #{neLng}
					and bmsc_id = #{bmscId,jdbcType=INTEGER}
					and not exists (select enb_ap_id from service_area_enb_ap x where x.service_area_id = #{serviceAreaId,jdbcType=INTEGER} and x.enb_ap_id = id)
			) t2 left join
			( 
				select t3.id as service_area_id, t3.name as service_area_name, t1.enb_ap_id
				from 
					service_area_enb_ap t1, 
					service_area t3, 
					(select enb_ap_id, max(service_area_id) as service_area_id, count(*) from service_area_enb_ap where service_area_id != #{serviceAreaId,jdbcType=INTEGER} group by enb_ap_id) t4
				where 
					t4.service_area_id = t1.service_area_id
					and t4.enb_ap_id = t1.enb_ap_id
					and t1.service_area_id = t3.id 
			) t1
		on 1 = 1
			and t1.enb_ap_id = t2.id
	</select>
	
	<select id="getServiceAreaCountByBmSc" resultMap="ServiceAreaCount" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
	select x.bmsc_id, x.city, count(*) as count
	from
	(
		select a.bmsc_id, a.service_area_id, c.city, count(*) as count		
		from bmsc_service_area a, service_area_enb_ap b, enb_ap c		
		where 1 = 1
			and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
			and b.service_area_id = a.service_area_id
			and c.id = b.enb_ap_id
			and c.bmsc_id = a.bmsc_id		
		group by a.bmsc_id, a.service_area_id, c.city
	) x
	group by  x.bmsc_id, x.city
	</select>

	<select id="getServiceAreaByLatLng" resultMap="ServiceAreaByBmScCity" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
	select a.bmsc_id, a.service_area_id, d.name, d,description, count(*) as totalCount
	from bmsc_service_area a, service_area_enb_ap b, enb_ap c, service_area d
	where 1 = 1
	and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
	and b.service_area_id = a.service_area_id
	and c.id = b.enb_ap_id
	and c.bmsc_id = a.bmsc_id
	and c.city = #{city,jdbcType=VARCHAR}
	and d.id = a.service_area_id
	group by a.bmsc_id, a.service_area_id
	</select>
	
	<!-- 
	<select id="getSeviceAreaByBmScCity" resultMap="ServiceAreaByBmScCity" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
	select a.bmsc_id, a.service_area_id, d.name as service_area_name
	, (	select count(*) from ( select x.service_area_id
		from bmsc_service_area x, service_area_enb_ap y, enb_ap z
		where 1 = 1 and x.bmsc_id = #{bmscId,jdbcType=INTEGER} 
			and y.service_area_id = x.service_area_id and z.id = y.enb_ap_id
			and z.city = #{serviceAreaCity,jdbcType=VARCHAR}
		group by x.bmsc_id, x.service_area_id) xx ) as totalCount
	from bmsc_service_area a, service_area_enb_ap b, enb_ap c, service_area d
	where 1 = 1
	and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
	and b.service_area_id = a.service_area_id
	and c.id = b.enb_ap_id
	and c.city = #{serviceAreaCity,jdbcType=VARCHAR}
	and d.id = a.service_area_id
	group by a.bmsc_id, a.service_area_id, d.name	
	order by d.created_at desc
	limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	-->
	
	<select id="getSeviceAreaByBmScCity" resultMap="ServiceAreaByBmScCity" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
	select 
		a.bmsc_id, a.service_area_id, d.name as service_area_name, d.description
		, (select count(*) from service_area_enb_ap x where x.service_area_id = a.service_area_id) as totalCount
	from 
		bmsc_service_area a, service_area_enb_ap b, enb_ap c, service_area d
	where 1 = 1
		and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
		and b.service_area_id = a.service_area_id
		and c.id = b.enb_ap_id
		and c.bmsc_id = a.bmsc_id
		<if test="serviceAreaCity != null and serviceAreaCity != ''">
			and c.city = #{serviceAreaCity,jdbcType=VARCHAR}
		</if>
		and d.id = a.service_area_id
		<if test="toSearchTxt != null and toSearchTxt != ''">
			and (a.service_area_id LIKE CONCAT('%', #{toSearchTxt}, '%') or d.name LIKE CONCAT('%', #{toSearchTxt}, '%') )
		</if>
	group by a.bmsc_id, a.service_area_id, d.name	
	order by length(a.service_area_id), a.service_area_id
	limit #{page,jdbcType=INTEGER}, #{perPage,jdbcType=INTEGER}
	</select>
	
	<!-- Service Area 로 방송 스케쥴 요약 정보 조회 -->
	<select id="getScheduleSummaryByServiceArea" resultMap="ScheduleSummaryByServiceArea" parameterType="com.catenoid.dashbd.dao.model.ScheduleSummarySearchParam" >
		select 
			a.id, a.service_area_id, a.content_id, a.bcid, a.name, a.start_date, a.end_date, a.created_at, a.updated_at, a.del_yn
			, (select path from contents_images b where 1 = 1 and b.content_id = a.content_id and type = 'thumbnail' order by length(id) desc, id desc limit 0, 1 ) as thumbnail 
			, ( (now()-a.start_date) / (a.end_date-a.start_date) * 100 ) as progress_rate
			, timediff(a.end_date,NOW())  AS left_time
			, b.service as service_type
			, c.category
			, c.url
		from schedule a, broadcast_info b, contents c
			where 1 = 1
			and a.service_area_id = #{serviceAreaId,jdbcType=INTEGER}
			and a.del_yn = 'N'
			<if test="activeContent == 1">
				and now() between a.start_date and a.end_date
			</if>
			<if test="activeContent == 0">
			 	AND DATE_FORMAT(now(), '%Y-%m-%d') = DATE_FORMAT(a.start_date , '%Y-%m-%d')
			 	<![CDATA[ 
 				AND NOW() < a.start_date  
 				]]>
			</if>
			and b.bcid = a.bcid
			and c.id = a.content_id
		order by a.start_date
		limit 0, #{maxCount}
	</select>
	
	<!-- BMSC 로 방송 스케쥴 요약 정보 조회 김범길 contents_images 테이블 조인 추가 임시-->
	<select id="getScheduleSummaryByBmsc" resultMap="ScheduleSummaryByServiceArea" parameterType="java.util.HashMap" >
		select 
			a.id, a.service_area_id, a.content_id, a.bcid, a.name, a.start_date, a.end_date, a.created_at, a.updated_at, a.del_yn
			, (select path from contents_images b where 1 = 1 and b.content_id = a.content_id and type = 'thumbnail' order by length(id) desc, id desc limit 0, 1 ) as thumbnail 
			, ( (now()-a.start_date) / (a.end_date-a.start_date) * 100 ) as progress_rate
			, timediff(a.end_date,NOW())  AS left_time
			, b.service as service_type
			, c.category
			, case when d.type='preview' then d.path else c.url end url
		from schedule a, broadcast_info b, contents c, contents_images d
			where 1 = 1 and c.id=d.content_id
			and a.service_area_id in (select b.service_area_id from bmsc_service_area b where b.bmsc_id = #{bmscId,jdbcType=INTEGER})
			and a.del_yn = 'N'
			<if test="activeContent == 1">
				and now() between a.start_date and a.end_date
			</if>
			<if test="activeContent == 0">
			 	AND DATE_FORMAT(now(), '%Y-%m-%d') = DATE_FORMAT(a.start_date , '%Y-%m-%d')
			 	<![CDATA[ 
 				AND NOW() < a.start_date  
 				]]>
			</if>
			and b.bcid = a.bcid
			and c.id = a.content_id
		order by a.start_date
		limit 0, #{maxCount, jdbcType=INTEGER}
	</select>
	
	<!-- Service Area 로 사용중인 Bandwidth 조회 -->
	<select id="getGBRSum" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
		SELECT 
			round(((IFNULL(sum(GBR), '0') / e.bandwidth) * 100), 2) as GBRSum
		FROM 
			schedule s, broadcast_info b, enb_ap e, 
			(select enb_ap_id, service_area_id from service_area_enb_ap s where s.service_area_id = #{serviceAreaId,jdbcType=INTEGER} limit 0,1) sa
		WHERE 1=1
			AND now() between s.start_date and s.end_date
			AND s.service_area_id = #{serviceAreaId,jdbcType=INTEGER}
			and s.BCID = b.BCID
			and sa.service_area_id = s.service_area_id
			and e.id = sa.enb_ap_id
			and e.bmsc_id = #{bmscId,jdbcType=INTEGER}
	</select>
	
	<!-- Service Area 에 기지국(eNB) 추가 -->
	<!-- 
	<insert id="addToServiceArea" parameterType="java.util.HashMap" >
	insert into service_area_enb_ap 
	(service_area_id, enb_ap_id, created_at, updated_at)
	values 
	(#{serviceAreaId,jdbcType=INTEGER}, #{enbApId,jdbcType=INTEGER}, now(), now())
	</insert>
	-->

	<insert id="addToServiceArea" parameterType="java.util.HashMap" >
	insert into service_area_enb_ap 
	(service_area_id, enb_ap_id, created_at, updated_at)
	select 
		#{serviceAreaId,jdbcType=INTEGER}, #{enbApId,jdbcType=INTEGER}, now(), now()
	from dual
	where not exists 
		(select enb_ap_id 
		from service_area_enb_ap 
		where 
			service_area_id = #{serviceAreaId,jdbcType=INTEGER} 
			and enb_ap_id = #{enbApId,jdbcType=INTEGER})
	</insert>
				
	<!-- Service Area 에 등록된 기지국(eNB) 삭제 -->
	<delete id="deleteFromServiceArea" parameterType="java.util.HashMap" >
	delete from service_area_enb_ap
	where 1= 1
		and service_area_id = #{serviceAreaId,jdbcType=INTEGER}
		and enb_ap_id in 
			<foreach collection="enbApIds" item="enbApId" open="(" close=")" separator="," >
				#{enbApId}
			</foreach>
	</delete>

	<!-- Service Area 생성 -->
	<select id="selectServiceAreaCnt" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" resultType="java.lang.Integer" >
	select count(*)
	from service_area
	where id = #{serviceAreaId,jdbcType=INTEGER}
	</select>

	<!-- Service Area 생성 -->
	<insert id="createServiceArea" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
	insert into service_area 
	(id, bandwidth, name, city, description, created_at, updated_at)
	select  
		#{serviceAreaId,jdbcType=INTEGER}, #{bandwidth,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, now(), now()
	from dual
	where not exists 
		(select id 
		from service_area 
		where 
			id = #{id,jdbcType=INTEGER} 
		)
	</insert>
	
	<!-- BMSC 생성 -->
	<insert id="createBmScServiceArea" parameterType="com.catenoid.dashbd.dao.model.ServiceArea" >
	insert into bmsc_service_area 
	( bmsc_id, service_area_id, created_at, updated_at )
	select  
		#{bmscId,jdbcType=INTEGER}, #{serviceAreaId,jdbcType=INTEGER}, now(), now()
	from dual
	where not exists 
	(
		select bmsc_id 
		from bmsc_service_area 
		where 
			bmsc_id = #{bmscId, jdbcType=INTEGER} 
			and service_area_id = #{serviceAreaId, jdbcType=INTEGER}
	)
	</insert>
	
	<!-- eNB 생성 -->
	<insert id="createENBs" parameterType="java.util.HashMap" >
	insert into enb_ap 
	(
		id, name, longitude, latitude, plmn, circle, circle_name, cluster_id, 
		ipaddress, earfcn, mbsfn, mbms_service_area_id, created_at, updated_at, city, bandwidth,
		operator_id, bmsc_id
	)
	select  
		#{id,jdbcType=INTEGER}, #{name}, #{longitude}, #{latitude}, #{plmn}, #{circle}, #{circleName}, #{clusterId,jdbcType=INTEGER}, 
		#{ipAddress}, #{earfcn}, #{mbsfn}, #{mbmsServiceAreaId,jdbcType=INTEGER}, now(), now(), #{city}, #{bandwidth},
		#{operator,jdbcType=INTEGER}, #{bmsc,jdbcType=INTEGER}
	from dual
	where not exists 
		(select id 
		from enb_ap 
		where 
			id = #{id,jdbcType=INTEGER} 
		)
	</insert>
	
	<!-- eNB 수정 -->
	<update id="updateENBs" parameterType="java.util.HashMap" >
	update enb_ap 
	set name = #{name},
		longitude = #{longitude},
		latitude = #{latitude},
		plmn = #{plmn},
		circle = #{circle},
		circle_name = #{circleName},
		cluster_id = #{clusterId,jdbcType=INTEGER},
		ipaddress = #{ipAddress},
		earfcn = #{earfcn},
		mbsfn = #{mbsfn},
		mbms_service_area_id = #{mbmsServiceAreaId,jdbcType=INTEGER},
		updated_at = now(),
		city = #{city},
		bandwidth = #{bandwidth}
	where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="getSeviceAreaByBmScId" resultMap="ServiceAreaByBmScId" parameterType="com.catenoid.dashbd.dao.model.BmscServiceAreaSearchParam" >
	select a.bmsc_id, a.service_area_id, d.name as service_area_name, d.description
	, (	select count(*) from ( select x.service_area_id
		from bmsc_service_area x, service_area_enb_ap y, enb_ap z
		where 1 = 1 and x.bmsc_id = #{bmscId,jdbcType=INTEGER} 
			and y.service_area_id = x.service_area_id and z.id = y.enb_ap_id
		group by x.bmsc_id, x.service_area_id) xx ) as totalCount
	from bmsc_service_area a, service_area_enb_ap b, enb_ap c, service_area d
	where 1 = 1
	and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
	and b.service_area_id = a.service_area_id
	and c.id = b.enb_ap_id
	and d.id = a.service_area_id
	group by a.bmsc_id, a.service_area_id, d.name	
	</select>

	<select id="downloadENBs" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
	SELECT 
		id, name, longitude, latitude, plmn, circle, circle_name, cluster_id, 
		ipaddress, earfcn, mbsfn, mbms_service_area_id, created_at, updated_at, city, ifnull(bandwidth, 0) as bandwidth,
		operator_id, bmsc_id,
		( select count(*) from enb_ap where operator_id = #{operatorId,jdbcType=INTEGER} and bmsc_id = #{bmscId,jdbcType=INTEGER} ) as totalCount
	FROM 
		enb_ap e
	WHERE 1=1
		AND operator_id = #{operatorId,jdbcType=INTEGER} 
		and bmsc_id = #{bmscId,jdbcType=INTEGER}
	</select>
	
	<select id="downloadENBsByServiceAreaId" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
	select 
		e.id, e.name, e.longitude, e.latitude, e.plmn, e.circle, e.circle_name, e.cluster_id, 
		e.ipaddress, e.earfcn, e.mbsfn, e.mbms_service_area_id, e.created_at, e.updated_at, e.city, ifnull(e.bandwidth, 0) as bandwidth,
		e.operator_id, e.bmsc_id,
		( 
			select count(*) 
			from enb_ap e, service_area_enb_ap s 
			where 
				e.operator_id = #{operatorId,jdbcType=INTEGER} 
				and e.bmsc_id = #{bmscId,jdbcType=INTEGER} 
				and s.service_area_id in <foreach collection="serviceAreaIds" item="serviceAreaId" index="index" separator="," open="(" close=")">
            #{serviceAreaId}
        </foreach>
				and e.id = s.enb_ap_id
		) as totalCount
	from 
		enb_ap e, service_area_enb_ap s
	where 1=1
		and e.operator_id = #{operatorId,jdbcType=INTEGER} 
		and e.bmsc_id = #{bmscId,jdbcType=INTEGER}
		and s.service_area_id in 
			<foreach collection="serviceAreaIds" item="serviceAreaId" index="index" separator="," open="(" close=")">
            #{serviceAreaId}
        	</foreach>
		and e.id = s.enb_ap_id
	</select>
	
	<select id="getServiceAreaEnbApNotMappedSA" resultMap="ServiceAreaEnbAp" parameterType="java.util.HashMap" >
		select 
			ifnull( t1.service_area_id, '' ) as service_area_id, 
			ifnull( t1.service_area_name, '' ) as service_area_name, 
			t2.bandwidth as service_area_bandwidth, 
			t2.city as service_area_city,
			t2.id as enb_ap_id, 
			t2.name as enb_ap_name, 
			t2.longitude as longitude, 
			t2.latitude as latitude, 
			t2.plmn as plmn,
			t2.mbsfn as mbsfn,
			t2.created_at, 
			t2.updated_at
			, 0 as totalCount
		from 
			(
				select * from enb_ap
				where 1 = 1
					and latitude between #{swLat} and #{neLat}
					and longitude between #{swLng} and #{neLng}
					and bmsc_id = #{bmscId,jdbcType=INTEGER}
			) t2 left join
			( 
				select t3.id as service_area_id, t3.name as service_area_name, t1.enb_ap_id
				from 
					service_area_enb_ap t1, 
					service_area t3, 
					(select enb_ap_id, max(service_area_id) as service_area_id, count(*) from service_area_enb_ap where 1 = 1 group by enb_ap_id) t4
				where 
					t4.service_area_id = t1.service_area_id
					and t4.enb_ap_id = t1.enb_ap_id
					and t1.service_area_id = t3.id 
			) t1
		on 1 = 1
			and t1.enb_ap_id = t2.id
	</select>
	
	<select id="getSeviceAreaNotMapped" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
	select 
		a.bmsc_id as bmscId, a.service_area_id as serviceAreaId, b.name as serviceAreaName, b.description
		, (	
			select count(*) 
			from bmsc_service_area a, service_area b
			where 1 = 1
				and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
				and b.id = a.service_area_id
				and not exists ( select service_area_id from service_area_enb_ap where bmsc_id = a.bmsc_id  and service_area_id = a.service_area_id ) 
		) as totalCount
	from bmsc_service_area a, service_area b
	where 1 = 1
	and a.bmsc_id = #{bmscId,jdbcType=INTEGER}
	and b.id = a.service_area_id
	and not exists ( select service_area_id from service_area_enb_ap where bmsc_id = a.bmsc_id  and service_area_id = a.service_area_id )
	order by length(a.service_area_id), a.service_area_id asc
	</select>
	
	<delete id="serviceAreaByDelete" parameterType="java.util.HashMap" >
	    DELETE FROM service_area
	    WHERE id = #{serviceAreaId}
	</delete>
	
	<delete id="serviceAreaByENBDelete" parameterType="java.util.HashMap" >
	    DELETE FROM service_area_enb_ap
	    WHERE service_area_id = #{serviceAreaId}
	</delete>
	
	<select id="selectEnbListCount" resultType="Integer" parameterType="java.util.HashMap">
	    SELECT COUNT(*)
		FROM enb_ap
	    WHERE id = #{enbApId}
	</select>
	
	<select id="getPermissionList" resultMap="ServiceAreaPermissionAp" parameterType="java.util.HashMap" >
	SELECT
		rownum, permissionId, permissionName, permissionCount,
		(
			select count(*) from
			(
				select A.id AS permissionId, A.NAME AS permissionName, COUNT(B.permission_id) AS permissionCount			
				from permission A left outer join users_permission B on A.id=B.permission_id			                  
				left outer join users C on B.user_id = C.user_id			                  
				left outer join operator D on C.operator_id=D.id			where 1=1	
				<if test="operatorId != null and operatorId != ''">
					and D.id = #{operatorId}
				</if>		 			
				group by A.id, A.NAME
			) K
		) as totalCount
	FROM 
	( 
		SELECT
			@ROWNUM := @ROWNUM + 1 AS rownum,
			permissionId, permissionName, permissionCount
		FROM 
		( SELECT @ROWNUM := 0 AS rownum ) R,
		( 	
			select A.id AS permissionId, A.NAME AS permissionName, COUNT(B.permission_id) AS permissionCount
			from permission A left outer join users_permission B on A.id=B.permission_id
			                  left outer join users C on B.user_id = C.user_id
			                  left outer join operator D on C.operator_id=D.id
			where 1=1
			<if test="operatorId != null and operatorId != ''">
				and D.id = #{operatorId}
			</if>
			group by A.id, A.NAME
			ORDER BY 	<if test="sort == null">permissionId</if>
						<if test="sort != null">
							<if test="sort == 'permissionName'">permissionName</if>
							<if test="sort == 'permissionCount'">permissionCount</if>
							${order}
						</if> 
		) T
	) R
	WHERE rownum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="countByEnbsCount" parameterType="java.util.HashMap" resultType="java.lang.Long" >
		select	count(*) as eNBsCount
		from	enb_ap
		where	1=1
		<if test="operatorId != null and operatorId != ''">
			and operator_id = #{operatorId}
		</if>
		<if test="bmscId != null and bmscId != ''">
			and bmsc_id = #{bmscId}
		</if>
	</select>
	
	<select id="countByServiceAreaCount" parameterType="java.util.HashMap" resultType="java.lang.Long" >
		select	count(*)
		from	bmsc_service_area a left outer join operator_bmsc b on a.bmsc_id=b.bmsc_id			
		where	1=1 
		<if test="operatorId != null and operatorId != ''">
			and b.operator_id = #{operatorId}
		</if>
		<if test="bmscId != null and bmscId != ''">
			and a.bmsc_id = #{bmscId}
		</if>
	</select>
	
	<select id="getIncomingTrafficList" resultMap="SystemIncomingLog" parameterType="java.util.HashMap">
		select rownum, req_type, success_count, fail_count,
				(
			      select count(*) from 
			      (
			          select  @ROWNUM := @ROWNUM + 1 AS rownum, Z.req_type, sum(Z.SuccessCount) as success_count, sum(Z.FailCount) as fail_count
			          from    ( SELECT @ROWNUM := 0 AS rownum ) R,
			    				      (
			        		        select
			        		            K.req_type,
			        		            IFNULL(case when K.req_code = 'SUCCESS' then K.reqCount end, 0) as SuccessCount,
			        		            IFNULL(case when K.req_code = 'Fail' then K.reqCount end, 0) as FailCount
			        		        from (select  req_type, req_code, count(req_code) as reqCount
			        		              from    system_ajax_log
			        		              where   1=1
					             		  <if test="searchYear != null and searchYear != ''">
					              		  	and left(insert_at, 4) = #{searchYear}
										  </if>
										  <if test="searchMonth != null and searchMonth != ''">
					              		  	and substring(insert_at, 6, 2) = #{searchMonth}
										  </if>
										  <if test="searchDay != null and searchDay != ''">
					              		  	and substring(insert_at, 9, 2) = #{searchDay}
										  </if>
			      		                group by req_type, req_code) K
			    		          ) Z
			    		          group by Z.req_type
			      ) T    
				) as totalCount
		from (
		    select  @ROWNUM := @ROWNUM + 1 AS rownum, Z.req_type, sum(Z.SuccessCount) as success_count, sum(Z.FailCount) as fail_count
			from    ( SELECT @ROWNUM := 0 AS rownum ) R,
					(
			        select
			            K.req_type,
			            IFNULL(case when K.req_code = 'SUCCESS' then K.reqCount end, 0) as SuccessCount,
			            IFNULL(case when K.req_code = 'Fail' then K.reqCount end, 0) as FailCount
			        from (select  req_type, req_code, count(req_code) as reqCount
			              from    system_ajax_log
			              where   1=1
			             		  <if test="searchYear != null and searchYear != ''">
			              		  	and left(insert_at, 4) = #{searchYear}
								  </if>
								  <if test="searchMonth != null and searchMonth != ''">
			              		  	and substring(insert_at, 6, 2) = #{searchMonth}
								  </if>
								  <if test="searchDay != null and searchDay != ''">
			              		  	and substring(insert_at, 9, 2) = #{searchDay}
								  </if>
			              group by req_type, req_code) K
			        ) Z
			group by Z.req_type
		) R		
		WHERE rownum BETWEEN  #{start} AND #{end}
		ORDER BY 	<if test="sort == null">req_type</if>
						<if test="sort != null">
							<if test="sort == 'rownum'">rownum</if>
							<if test="sort == 'reqType'">req_type</if>
							<if test="sort == 'successCount'">success_count</if>
							<if test="sort == 'failCount'">fail_count</if>
							<if test="sort == 'totPercentage'">success_count/(success_count+fail_count)</if>
							${order}
						</if> 
		</select>
	
	<select id="getInterTrafficList" resultMap="SystemIncomingLog" parameterType="java.util.HashMap">
		select rownum, req_type, success_count, fail_count,
				(
			      select count(*) from 
			      (
			          select  @ROWNUM := @ROWNUM + 1 AS rownum, Z.req_type, sum(Z.SuccessCount) as success_count, sum(Z.FailCount) as fail_count
					  from    ( SELECT @ROWNUM := 0 AS rownum ) R,
								(
						        select
						            K.req_type,
						            IFNULL(case when K.req_code = 'SUCCESS' then K.reqCount end, 0) as SuccessCount,
						            IFNULL(case when K.req_code = 'Fail' then K.reqCount end, 0) as FailCount
					            from (select  method_service_type as req_type, method_code as req_code, count(method_code) as reqCount
					            	  from    system_interface_log
						              where   1=1
						             		  <if test="searchOperator != null and searchOperator != ''">
						              		  	and method_bmsc_id in (select bmsc_id from operator_bmsc where operator_id=#{searchOperator})
											  </if>
						             		  <if test="searchBmsc != null and searchBmsc != ''">
						              		  	and method_bmsc_id = #{searchBmsc}
											  </if>
						             		  <if test="searchYear != null and searchYear != ''">
						              		  	and left(insert_at, 4) = #{searchYear}
											  </if>
											  <if test="searchMonth != null and searchMonth != ''">
						              		  	and substring(insert_at, 6, 2) = #{searchMonth}
											  </if>
											  <if test="searchDay != null and searchDay != ''">
						              		  	and substring(insert_at, 9, 2) = #{searchDay}
											  </if>
						              group by method_service_type, method_code) K
						        ) Z
					  group by Z.req_type
			      ) T    
				) as totalCount
		from (
		    select  @ROWNUM := @ROWNUM + 1 AS rownum, Z.req_type, sum(Z.SuccessCount) as success_count, sum(Z.FailCount) as fail_count
			from    ( SELECT @ROWNUM := 0 AS rownum ) R,
					(
			        select
			            K.req_type,
			            IFNULL(case when K.req_code = 'SUCCESS' then K.reqCount end, 0) as SuccessCount,
			            IFNULL(case when K.req_code = 'Fail' then K.reqCount end, 0) as FailCount
		            from (select  method_service_type as req_type, method_code as req_code, count(method_code) as reqCount
		            	  from    system_interface_log
			              where   1=1
			             		  <if test="searchOperator != null and searchOperator != ''">
			              		  	and method_bmsc_id in (select bmsc_id from operator_bmsc where operator_id=#{searchOperator})
								  </if>
			             		  <if test="searchBmsc != null and searchBmsc != ''">
			              		  	and method_bmsc_id = #{searchBmsc}
								  </if>
			             		  <if test="searchYear != null and searchYear != ''">
			              		  	and left(insert_at, 4) = #{searchYear}
								  </if>
								  <if test="searchMonth != null and searchMonth != ''">
			              		  	and substring(insert_at, 6, 2) = #{searchMonth}
								  </if>
								  <if test="searchDay != null and searchDay != ''">
			              		  	and substring(insert_at, 9, 2) = #{searchDay}
								  </if>
			              group by method_service_type, method_code) K
			        ) Z
			group by Z.req_type
		) R
		ORDER BY 	<if test="sort == null">req_type</if>
						<if test="sort != null">
							<if test="sort == 'rownum'">rownum</if>
							<if test="sort == 'reqType'">req_type</if>
							<if test="sort == 'successCount'">success_count</if>
							<if test="sort == 'failCount'">fail_count</if>
							<if test="sort == 'totPercentage'">success_count/(success_count+fail_count)</if>
							${order}
						</if> 
	</select>
	
	<select id="getSystemDblist" resultMap="SystemDatabaseBackup" parameterType="java.util.HashMap">
		SELECT
			rownum, backupId, backupFileName, backupFilePath, backupCreatedId, backupCreatedAt,
			(
				select count(*) from
				(
					select	id AS backupId, backup_file_name AS backupFileName, backup_file_path AS backupFilePath
	             			, backup_created_id AS backupCreatedId, backup_created_at AS backupCreatedAt
					from database_backup
					where 1=1
					<if test="backupId != null and backupId != ''">
						and  id = #{backupId}
					</if>
					<if test="searchYear != null and searchYear != ''">
						and  left(DATE_FORMAT(backup_created_at, '%Y-%m-%d'), 4) = #{searchYear}
					</if>
					<if test="searchMonth != null and searchMonth != ''">
						and substring(DATE_FORMAT(backup_created_at, '%Y-%m-%d'), 6, 2) = #{searchMonth}
					</if>
				) K
			) as totalCount
		FROM 
		( 
			SELECT
				@ROWNUM := @ROWNUM + 1 AS rownum,
				backupId, backupFileName, backupFilePath, backupCreatedId, backupCreatedAt
			FROM 
			( SELECT @ROWNUM := 0 AS rownum ) R,
			( 	
				select	id AS backupId, backup_file_name AS backupFileName, backup_file_path AS backupFilePath
	             		, backup_created_id AS backupCreatedId, backup_created_at AS backupCreatedAt
				from database_backup
				where 1=1
				<if test="backupId != null and backupId != ''">
					and  id = #{backupId}
				</if>
				<if test="searchYear != null and searchYear != ''">
					and  left(DATE_FORMAT(backup_created_at, '%Y-%m-%d'), 4) = #{searchYear}
				</if>
				<if test="searchMonth != null and searchMonth != ''">
					and substring(DATE_FORMAT(backup_created_at, '%Y-%m-%d'), 6, 2) = #{searchMonth}
				</if>
				ORDER BY 	<if test="sort == null">backup_created_at desc</if>
							<if test="sort != null">
								<if test="sort == 'backupFileName'">backup_file_name</if>
								<if test="sort == 'backupFilePath'">backup_file_path</if>
								<if test="sort == 'backupCreatedId'">backup_created_id</if>
								<if test="sort == 'backupCreatedAt'">backup_created_at</if>
								${order}
							</if> 
			) T
		) R
		WHERE rownum BETWEEN #{start} AND #{end}
	</select>
	
	<!-- DB Backup log 생성 -->
	<insert id="insertSystemDbBackup" parameterType="java.util.HashMap">
	insert into database_backup 
	( backup_file_name, backup_file_path, backup_created_id, backup_created_at )
	values
	( #{fileName}, #{filePath}, #{createdId}, now() )
	</insert>
	
	<select id="getSystemBCContentsList" resultMap="SystemBroadCastContents" parameterType="java.util.HashMap">
		SELECT
			rownum, schId, bmscId, bmscName, serviceAreaId, serviceAreaName, contentId, contentName, operatorId, operatorName,
		    serviceCategory, fileType, fileFormat, serviceType, startDate, endDate, createdAt, updatedAt,
			(
				select count(*) from
				(
					select  a.id as schId, a.bmscid as bmscId, c.name as bmscName, a.service_area_id as serviceAreaId, b.name as serviceAreaName, 
					        a.content_id as contentId, d.title as contentName, f.operator_id as operatorId, g.name as operatorName,
					        d.category as serviceCategory, d.type as fileType, d.file_format as fileFormat, e.service as serviceType,
					        a.start_date as startDate, a.end_date as endDate, a.created_at as createdAt, a.updated_at as updatedAt
					from    schedule a, service_area b, bmsc c, contents d, broadcast_info e, operator_bmsc f, operator g
					where   a.service_area_id=b.id and a.bmscId=c.id and a.content_id=d.id and a.BCID=e.BCID and a.bmscId = f.bmsc_id and f.operator_id = g.id
					<if test="searchOperator != null and searchOperator != ''">
						and  f.operator_id = #{searchOperator}
					</if>
					<if test="searchBmsc != null and searchBmsc != ''">
						and  a.bmscid = #{searchBmsc}
					</if>
					<if test="searchSDate != null and searchSDate != '' and searchEDate != null and searchEDate != ''">
						and DATE_FORMAT(a.start_date, '%Y-%m-%d') between #{searchSDate} and #{searchEDate}
					</if>
				) K
			) as totalCount
		FROM 
		( 
			SELECT
				@ROWNUM := @ROWNUM + 1 AS rownum,
				schId, bmscId, bmscName, serviceAreaId, serviceAreaName, contentId, contentName, operatorId, operatorName,
		        serviceCategory, fileType, fileFormat, serviceType, startDate, endDate, createdAt, updatedAt
			FROM 
			( SELECT @ROWNUM := 0 AS rownum ) R,
			( 	
				select  a.id as schId, a.bmscid as bmscId, c.name as bmscName, a.service_area_id as serviceAreaId, b.name as serviceAreaName, 
				        a.content_id as contentId, d.title as contentName, f.operator_id as operatorId, g.name as operatorName,
				        d.category as serviceCategory, d.type as fileType, d.file_format as fileFormat, e.service as serviceType,
				        a.start_date as startDate, a.end_date as endDate, a.created_at as createdAt, a.updated_at as updatedAt
				from    schedule a, service_area b, bmsc c, contents d, broadcast_info e, operator_bmsc f, operator g
				where   a.service_area_id=b.id and a.bmscId=c.id and a.content_id=d.id and a.BCID=e.BCID and a.bmscId = f.bmsc_id and f.operator_id = g.id
				<if test="searchOperator != null and searchOperator != ''">
					and  f.operator_id = #{searchOperator}
				</if>
				<if test="searchBmsc != null and searchBmsc != ''">
					and  a.bmscid = #{searchBmsc}
				</if>
				<if test="searchSDate != null and searchSDate != '' and searchEDate != null and searchEDate != ''">
					and DATE_FORMAT(a.start_date, '%Y-%m-%d') between #{searchSDate} and #{searchEDate}
				</if>
				ORDER BY 	<if test="sort == null">a.created_at desc</if>
							<if test="sort != null">
								<if test="sort == 'contentName'">d.title</if>
								<if test="sort == 'serviceCategory'">d.category</if>
								<if test="sort == 'startDate'">a.start_date</if>
								<if test="sort == 'endDate'">a.end_date</if>
								<if test="sort == 'serviceType'">e.service</if>
								<if test="sort == 'bmscName'">c.name</if>
								<if test="sort == 'serviceAreaName'">b.name</if>
								${order}
							</if> 
			) T
		) R
		WHERE rownum BETWEEN #{start} AND #{end}
	</select>
	
	
	
	
	
	
	
	
	<select id="getCitiesInCircle" parameterType="HashMap" resultType="HashMap">
		SELECT city.city_id, city.city_name, city.latitude
			, city.longitude, city.bandwidth, COUNT(hotspot.hotspot_id) as hotspotCnt
		FROM city city
		LEFT JOIN hotspot hotspot
		on city.city_id = hotspot.city_id
		WHERE circle_id = #{circle_id}
		GROUP BY city.city_id, city.city_name, city.latitude, city.longitude, city.bandwidth
	</select>
	
	<select id="getHotspotsInCities" parameterType="HashMap" resultType="HashMap">
		SELECT hotspot_id, hotspot_name, latitude, longitude, bandwidth
		FROM hotspot
		WHERE city_id = #{city_id}
	</select>
	
	<select id="getServiceAreaGroupList" parameterType="HashMap" resultType="HashMap">
		SELECT 
			  group_id
			, circle_id					
			, group_name								
			, group_description
		FROM service_area_group
		WHERE circle_id = #{circle_id}
		order by group_name
	</select>
	
	<select id="checkServiceAreaGroupName" parameterType="HashMap" resultType="int">
		SELECT COUNT(*)
		FROM service_area_group
		WHERE group_name = #{group_name}
	</select>
	
	<insert id="insertServiceAreaGroup" parameterType="HashMap">
		INSERT INTO service_area_group(circle_id, group_name, group_description, created_at)
		VALUES(#{circle_id}, #{group_name}, #{group_description}, now())
		<selectKey resultType="int" keyProperty="group_id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<select id="getTreeNodeData" parameterType="HashMap" resultType="HashMap">
		SELECT result.node_id, result.pnode_id, result.name, result.node_div
				, IF(sags.sub_said IS NULL, 0, 1) as checkYn, latitude, longitude, circle_id, bandwidth, childCnt
				, CASE WHEN result.node_div = 'root' THEN 'Areas'
					   WHEN result.node_div = 'circle' THEN 'Cities'
					   WHEN result.node_div = 'city' THEN 'Hotspotes'
					   ELSE ''
				  END as childCntName  
		FROM (
		    SELECT rootTreeView.*
	        FROM rootTreeView
	        UNION
	        SELECT circleTreeView.*
	        FROM circleTreeView
	        <if test="searchType != '' and searchType != null">
	        	INNER JOIN (
		            SELECT SUBSTRING(node_id, 1, IF(INSTR(node_id, 'B') = 0, 9999999999, INSTR(node_id, 'B')-1)) as compare_node_id
		            FROM treeView
		            WHERE 1=1
		            <choose>
		            	<when test="searchType == 'circle'">
		            		AND node_div = 'circle'
		            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
		            	</when>
		            	<when test="searchType != 'said'">
		            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
		            	</when>
		            	<otherwise>
		            		AND said = #{searchInput}
		            	</otherwise>
		            </choose>
		        ) circleTemp
		        ON circleTreeView.node_id = circleTemp.compare_node_id
	        </if>
	        <if test="searchType != 'circle'">
	        	UNION
		        SELECT cityTreeView.*
		        FROM cityTreeView
<!-- 		        <if test="searchType != '' and searchType != null"> -->
		        	INNER JOIN (
			            SELECT SUBSTRING(node_id, 1, IF(INSTR(node_id, 'C') = 0, 9999999999, INSTR(node_id, 'C')-1)) as compare_node_id
			            FROM treeView
			            WHERE 1=1
			              <choose>
			              		<when test="searchType == 'city'">
				            		AND node_div = 'city'
				            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
				            	</when>
				            	<when test="searchType != 'said'">
				            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
				            	</when>
				            	<otherwise>
				            		AND said = #{searchInput}
				            	</otherwise>
				            </choose>
			        ) cityTemp
			        ON cityTreeView.node_id = cityTemp.compare_node_id
<!-- 		        </if> -->
	        </if>
	        <if test="searchType != 'circle' and searchType != 'city'
	        			and searchType != 'circleCity'">
	        	UNION
		        SELECT hotspotTreeView.*
		        FROM hotspotTreeView
<!-- 		        <if test="searchType != '' and searchType != null"> -->
		        	INNER JOIN (
			            SELECT node_id as compare_node_id
			            FROM treeView
			            WHERE 1=1
			              <choose>
			              		<when test="searchType == 'hotspot'">
				            		AND node_div = 'hotspot'
				            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
				            	</when>
				            	<when test="searchType != 'said'">
				            		AND name LIKE CONCAT('%', #{searchInput}, '%')	
				            	</when>
				            	<otherwise>
				            		AND said = #{searchInput}
				            	</otherwise>
				            </choose>
			        ) hotspotTemp
			        ON hotspotTreeView.node_id = hotspotTemp.compare_node_id
<!-- 		        </if> -->
	        </if>
		) result
		LEFT JOIN (
		  SELECT sub_said
		  FROM service_area_group_sub
		  WHERE group_id = #{group_id}
		) sags
		ON result.compare_id = sags.sub_said
		WHERE 1=1
		<if test="circle_id != null and circle_id != ''">
			 AND result.circle_id = #{circle_id}
		</if>
		ORDER BY node_id
	</select>
	
	<delete id="deleteServiceAreaGroup" parameterType="HashMap">
		DELETE FROM service_area_group
		WHERE group_id = #{group_id}
	</delete>
	
	<delete id="deleteServiceAreaGroupHotspot" parameterType="HashMap">
		DELETE FROM service_area_group_sub
		WHERE group_id = #{group_id}
	</delete>
	
	<insert id="insertServiceAreaGroupSub" parameterType="HashMap">
		INSERT INTO service_area_group_sub
		VALUES(#{group_id}, #{sub_div}, #{sub_said}, now())
	</insert>
	
	<select id="selectRegionalSchedule" parameterType="HashMap" resultType="HashMap">
		SELECT R.*
		FROM ( SELECT
				   @ROWNUM := @ROWNUM + 1 AS rownum,
				   T.*
			   FROM ( SELECT @ROWNUM := 0 AS rownum) R,
					( 	SELECT result.*
						FROM (
						      SELECT  
						              IFNULL(circle.circle_id, cityhotspot.circle_id) as circleId
						            , IFNULL(circle.circle_name, cityhotspot.circle_name) as circleName
						            , IF(cityhotspot.layerDiv = 'circle', 0, IF(cityhotspot.layerDiv = 'city', 1, 2)) as subCnt
						            , IFNULL(circle.circle_id, cityhotspot.circle_id) as psaid
						            , 'city' as layerDiv
						            , circle.serviceId
						            , circle.serviceName
						            , circle.service
						            , circle.scheduleType
						            , circle.scheduleStart
						            , circle.scheduleStop
						            , circle.gbr
						            , circle.deleveryType
						            , circle.fecRatio
						            , circle.viewers
						            , circle.onAirYn
						            , circle.scheduleId
						      FROM (
						          SELECT circle_id, circle_name, max(layerDiv) as layerDiv
						          FROM (
						          	  SELECT *
										FROM (
										    SELECT circle.circle_id, circle.circle_name, 'circle' as layerDiv, broad.*
										    FROM circle circle
										    INNER JOIN broadcast_info broad
										    ON circle.circle_id = broad.said
										    <if test="circleListStr != '' and circleListStr != null">
										    	WHERE circle.circle_id IN (${circleListStr})
										    </if>
										    UNION ALL
										    SELECT city.circle_id, city.circle_name, 'city' as layerDiv, broad.*
										    FROM city city
										    INNER JOIN broadcast_info broad
										    ON city.city_id = broad.said
										    <if test="cityListStr != '' and cityListStr != null">
										    	WHERE city.city_id IN (${cityListStr})
										    </if>
										    UNION ALL
										    SELECT city.circle_id, city.circle_name, 'hotspot' as layerDiv, broad.*
										    FROM city city
										    INNER JOIN hotspot hotspot
										    ON city.city_id = hotspot.city_id
										    INNER JOIN broadcast_info broad
										    ON broad.said = hotspot.hotspot_id    
										    <if test="hotspotListStr != '' and hotspotListStr != null">
										    	WHERE hotspot.hotspot_id IN (${hotspotListStr})
										    </if>
										) t1
										WHERE 1=1
										<if test="searchServiceType != null and searchServiceType != ''">
											AND service = #{searchServiceType}
										</if>
										<if test="searchSchedule != null and searchSchedule != ''">
											<choose>
												<when test="searchSchedule == 'onair'">
													AND now() between schedule_start and schedule_stop
												</when>
												<when test="searchSchedule == 'today'">
													<![CDATA[
													AND (date_format(now(), '%Y%m%d') = date_format(schedule_start, '%Y%m%d')
														OR date_format(now(), '%Y%m%d') < date_format(schedule_stop, '%Y%m%d'))
													]]>
												</when>
											</choose>
										</if>
										<if test="searchDateFrom != null and searchDateFrom != ''">
											<![CDATA[
											AND date_format(schedule_start, '%Y%m%d') >= #{searchDateFrom}
											]]>
										</if>
										<if test="searchDateTo != null and searchDateTo != ''">
											<![CDATA[
											AND date_format(schedule_stop, '%Y%m%d') <= #{searchDateTo}
											]]>
										</if>
										<if test="searchKeyword != null and searchKeyword != ''">
											AND (serviceId LIKE CONCAT('%', #{searchKeyword}, '%') 
													OR service_name LIKE CONCAT('%', #{searchKeyword}, '%'))
										</if>
						          ) t2
						          GROUP BY circle_id, circle_name
						      ) cityhotspot
						      LEFT JOIN (
						          SELECT circle_id, circle_name, 'circle' as layerDiv
						          , broad.serviceId, broad.service_name as serviceName
						          , broad.service, 'Single Session' as scheduleType, date_format(broad.schedule_start, '%Y-%m-%d %T') as scheduleStart
						          , date_format(broad.schedule_stop, '%Y-%m-%d %T') as scheduleStop, broad.GBR as gbr
						          , 'Unicats' as deleveryType, IFNULL(fecRatio, 0) as fecRatio
						          , format('10000', ',') as viewers
						          , IF(now() between broad.schedule_start and broad.schedule_stop, 'Y', 'N') as onAirYn
						          , schedule.id as scheduleId
						          FROM circle circle
						          INNER JOIN broadcast_info broad
						          ON circle.circle_id = broad.said
						          INNER JOIN schedule schedule
                                  ON broad.bcid = schedule.bcid
						      ) circle
						      ON cityhotspot.circle_id = circle.circle_id
						      WHERE 1=1
						      ORDER BY circle.circle_id
						) result
						WHERE 
						<choose>
							<when test="circleListStr == null">
								1=1
							</when>
							<otherwise>
								circleId IN (${circleListStr})
							</otherwise>
						</choose>
						<if test="searchServiceType != null and searchServiceType != ''">
							AND IFNULL(service, #{searchServiceType}) = #{searchServiceType}
						</if>
						<if test="searchSchedule != null and searchSchedule != ''">
							<choose>
								<when test="searchSchedule == 'onair'">
									AND now() between IFNULL(scheduleStart, now()) and IFNULL(scheduleStop, now())
								</when>
								<when test="searchSchedule == 'today'">
									<![CDATA[
									AND (date_format(now(), '%Y%m%d') = date_format(IFNULL(scheduleStart, now()), '%Y%m%d')
										OR date_format(now(), '%Y%m%d') < date_format(IFNULL(scheduleStop, now()), '%Y%m%d'))
									]]>
								</when>
							</choose>
						</if>
						<if test="searchDateFrom != null and searchDateFrom != ''">
							<![CDATA[
							AND date_format(IFNULL(scheduleStart, #{searchDateFrom}), '%Y%m%d') >= #{searchDateFrom}
							]]>
						</if>
						<if test="searchDateTo != null and searchDateTo != ''">
							<![CDATA[
							AND date_format(IFNULL(scheduleStop, #{searchDateTo}), '%Y%m%d') <= #{searchDateTo}
							]]>
						</if>
						<if test="searchKeyword != null and searchKeyword != ''">
							AND (serviceId LIKE CONCAT('%', #{searchKeyword}, '%') 
								OR serviceName LIKE CONCAT('%', #{searchKeyword}, '%'))
						</if>
					    ORDER BY <if test="sort == null">circleId</if>
					  		   <if test="sort != null">
					  		       <if test="sort == 'circleName'">circleName</if>
					  		       <if test="sort == 'serviceId'">serviceId</if>
					  		       <if test="sort == 'serviceName'">serviceName</if>
					  		       <if test="sort == 'service'">service</if>
					  		       <if test="sort == 'scheduleType'"></if>
					  		       <if test="sort == 'scheduleStart'">scheduleStart</if>
					  		       <if test="sort == 'scheduleStop'">scheduleStop</if>
					  		       <if test="sort == 'gbr'">gbr</if>
					  		       <if test="sort == 'fecRatio'">fecRatio</if>
					  		       <if test="sort == 'deleveryType'"></if>
					  		       <if test="sort == 'viewers'"></if>
					  		       ${order}
					  		   </if> , scheduleStart desc) T
			 ) R
		WHERE rownum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="selectRegionalScheduleCount" parameterType="HashMap" resultType="int">
		SELECT  COUNT(*)
		FROM (
			SELECT  
		              IFNULL(circle.circle_id, cityhotspot.circle_id) as circleId
		            , IFNULL(circle.circle_name, cityhotspot.circle_name) as circleName
		            , IF(cityhotspot.layerDiv = 'circle', 0, IF(cityhotspot.layerDiv = 'city', 1, 2)) as subCnt
		            , circle.serviceId
		            , circle.serviceName
		            , circle.service
		            , circle.scheduleType
		            , circle.scheduleStart
		            , circle.scheduleStop
		            , circle.gbr
		            , circle.deleveryType
		            , circle.fecRatio
		            , circle.viewers
		            , circle.onAirYn
		      FROM (
		          SELECT circle_id, circle_name, max(layerDiv) as layerDiv
		          FROM (
		          	  SELECT *
						FROM (
						    SELECT circle.circle_id, circle.circle_name, 'circle' as layerDiv, broad.*
						    FROM circle circle
						    INNER JOIN broadcast_info broad
						    ON circle.circle_id = broad.said
						    <if test="circleListStr != '' and circleListStr != null">
						    	WHERE circle.circle_id IN (${circleListStr})
						    </if>
						    UNION ALL
						    SELECT city.circle_id, city.circle_name, 'city' as layerDiv, broad.*
						    FROM city city
						    INNER JOIN broadcast_info broad
						    ON city.city_id = broad.said
						    <if test="cityListStr != '' and cityListStr != null">
						    	WHERE city.city_id IN (${cityListStr})
						    </if>
						    UNION ALL
						    SELECT city.circle_id, city.circle_name, 'hotspot' as layerDiv, broad.*
						    FROM city city
						    INNER JOIN hotspot hotspot
						    ON city.city_id = hotspot.city_id
						    INNER JOIN broadcast_info broad
						    ON broad.said = hotspot.hotspot_id    
						    <if test="hotspotListStr != '' and hotspotListStr != null">
						    	WHERE hotspot.hotspot_id IN (${hotspotListStr})
						    </if>
						) t1
						WHERE 1=1
						<if test="searchServiceType != null and searchServiceType != ''">
							AND service = #{searchServiceType}
						</if>
						<if test="searchSchedule != null and searchSchedule != ''">
							<choose>
								<when test="searchSchedule == 'onair'">
									AND now() between schedule_start and schedule_stop
								</when>
								<when test="searchSchedule == 'today'">
									<![CDATA[
									AND (date_format(now(), '%Y%m%d') = date_format(schedule_start, '%Y%m%d')
										OR date_format(now(), '%Y%m%d') < date_format(schedule_stop, '%Y%m%d'))
									]]>
								</when>
							</choose>
						</if>
						<if test="searchDateFrom != null and searchDateFrom != ''">
							<![CDATA[
							AND date_format(schedule_start, '%Y%m%d') >= #{searchDateFrom}
							]]>
						</if>
						<if test="searchDateTo != null and searchDateTo != ''">
							<![CDATA[
							AND date_format(schedule_stop, '%Y%m%d') <= #{searchDateTo}
							]]>
						</if>
						<if test="searchKeyword != null and searchKeyword != ''">
							AND (serviceId LIKE CONCAT('%', #{searchKeyword}, '%') 
								OR service_name LIKE CONCAT('%', #{searchKeyword}, '%'))
						</if>
		          ) t2
		          GROUP BY circle_id, circle_name
		      ) cityhotspot
		      LEFT JOIN (
		          SELECT circle_id, circle_name, 'circle' as layerDiv
		          , broad.serviceId, broad.service_name as serviceName
		          , broad.service, 'Single Session' as scheduleType, date_format(broad.schedule_start, '%Y-%m-%d %T') as scheduleStart
		          , date_format(broad.schedule_stop, '%Y-%m-%d %T') as scheduleStop, broad.GBR as gbr
		          , 'Unicats' as deleveryType, IFNULL(fecRatio, 0) as fecRatio
		          , format('10000', ',') as viewers
		          , IF(now() between broad.schedule_start and broad.schedule_stop, 'Y', 'N') as onAirYn
		          FROM circle circle
		          INNER JOIN broadcast_info broad
		          ON circle.circle_id = broad.said
		      ) circle
		      ON cityhotspot.circle_id = circle.circle_id
		      WHERE 1=1
		      ORDER BY circle.circle_id
		) result
		WHERE
		<choose>
			<when test="circleListStr == null">
				1=1
			</when>
			<otherwise>
				circleId IN (${circleListStr})
			</otherwise>
		</choose>
		<if test="searchServiceType != null and searchServiceType != ''">
			AND IFNULL(service, #{searchServiceType}) = #{searchServiceType}
		</if>
		<if test="searchSchedule != null and searchSchedule != ''">
			<choose>
				<when test="searchSchedule == 'onair'">
					AND now() between IFNULL(scheduleStart, now()) and IFNULL(scheduleStop, now())
				</when>
				<when test="searchSchedule == 'today'">
					<![CDATA[
					AND (date_format(now(), '%Y%m%d') = date_format(IFNULL(scheduleStart, now()), '%Y%m%d')
						OR date_format(now(), '%Y%m%d') < date_format(IFNULL(scheduleStop, now()), '%Y%m%d'))
					]]>
				</when>
			</choose>
		</if>
		<if test="searchDateFrom != null and searchDateFrom != ''">
			<![CDATA[
			AND date_format(IFNULL(scheduleStart, #{searchDateFrom}), '%Y%m%d') >= #{searchDateFrom}
			]]>
		</if>
		<if test="searchDateTo != null and searchDateTo != ''">
			<![CDATA[
			AND date_format(IFNULL(scheduleStop, #{searchDateTo}), '%Y%m%d') <= #{searchDateTo}
			]]>
		</if>
		<if test="searchKeyword != null and searchKeyword != ''">
			AND (serviceId LIKE CONCAT('%', #{searchKeyword}, '%') 
				OR serviceName LIKE CONCAT('%', #{searchKeyword}, '%'))
		</if>
	</select>
	
	<select id="getRegionalSubSchedule" parameterType="HashMap" resultType="HashMap">
		SELECT result.*
		FROM (
		<choose>
			<when test="layerDiv == 'city'">
				SELECT 
				        IFNULL(city.city_id, hotspot.city_id) as cityId
				      , IFNULL(city.city_name, hotspot.city_name) as cityName
				      , IF(hotspot.layerDiv = 'city', 0, 1) as subCnt
				      , IFNULL(city.city_id, hotspot.city_id) as psaid
				      , 'hotspot' as layerDiv
				      , city.serviceId
				      , city.serviceName
				      , city.service
				      , city.scheduleType
				      , city.scheduleStart
				      , city.scheduleStop
				      , city.gbr
				      , city.deleveryType
				      , city.fecRatio
				      , city.viewers
				      , city.onAirYn
				      , hotspot.scheduleId
				FROM (
				    SELECT circle_id, city_id, city_name, max(layerDiv) as layerDiv, schedule.id as scheduleId
				    FROM (
				    	SELECT city.circle_id, city.city_id, city.city_name, 'city' as layerDiv, broad.bcid
			            FROM city city
			            INNER JOIN broadcast_info broad
			            ON city.city_id = broad.said
			            <if test="cityListStr != '' and cityListStr != null">
							AND city.city_id IN (${cityListStr})
						</if>
				    	UNION ALL
				        SELECT city.circle_id, city.city_id, city.city_name, 'hotspot' as layerDiv, broad.bcid
				        FROM city city
				        INNER JOIN hotspot hotspot
				        ON city.city_id = hotspot.city_id
				        INNER JOIN broadcast_info broad
				        ON broad.said = hotspot.hotspot_id
				        <if test="hotspotListStr != '' and hotspotListStr != null">
							AND hotspot.hotspot_id IN (${hotspotListStr})
						</if>
				    ) t
				    INNER JOIN schedule schedule
				    ON t.bcid = schedule.bcid
				    GROUP BY circle_id, city_id, city_name
				) hotspot
				LEFT JOIN (
				  SELECT city_id, city_name, 'city' as layerDiv, circle_id
				    , broad.serviceId, broad.service_name as serviceName
				    , broad.service, 'Single Session' as scheduleType, date_format(broad.schedule_start, '%Y-%m-%d %T') as scheduleStart
				    , date_format(broad.schedule_stop, '%Y-%m-%d %T') as scheduleStop, broad.GBR as gbr
				    , 'Unicats' as deleveryType, IFNULL(fecRatio, 0) as fecRatio
				    , format('10000', ',') as viewers
				    , IF(now() between broad.schedule_start and broad.schedule_stop, 'Y', 'N') as onAirYn
				  FROM city city
				  INNER JOIN broadcast_info broad
				  ON city.city_id = broad.said
				  <if test="cityListStr != '' and cityListStr != null">
				  	AND city.city_id IN (${cityListStr})
				  </if>
				) city
				ON hotspot.city_id = city.city_id
				WHERE IFNULL(city.circle_id, hotspot.circle_id) = #{psaid}
			</when>
			<when test="layerDiv == 'hotspot'">
				SELECT hotspot.hotspot_id as hotspotId, hotspot.hotspot_name as hotspotName, broad.serviceId, broad.service_name as serviceName
				    , broad.service, 'Single Session' as scheduleType, date_format(broad.schedule_start, '%Y-%m-%d %T') as scheduleStart
				    , date_format(broad.schedule_stop, '%Y-%m-%d %T') as scheduleStop, broad.GBR as gbr
				    , 'Unicats' as deleveryType, IFNULL(fecRatio, 0) as fecRatio
				    , format('10000', ',') as viewers
				    , IF(now() between broad.schedule_start and broad.schedule_stop, 'Y', 'N') as onAirYn
				    , schedule.id as scheduleId
				FROM broadcast_info broad
				INNER JOIN hotspot hotspot
				ON hotspot.hotspot_id = broad.said
				INNER JOIN schedule schedule
				ON broad.bcid = schedule.bcid 
				WHERE hotspot.city_id = #{psaid}
				<if test="hotspotListStr != '' and hotspotListStr != null">
					AND hotspot.hotspot_id IN (${hotspotListStr})
				</if>
			</when>
			<when test="layerDiv == 'directHotspot'">
				SELECT hotspot.hotspot_id as hotspotId, hotspot.hotspot_name as hotspotName, broad.serviceId, broad.service_name as serviceName
				    , broad.service, 'Single Session' as scheduleType, date_format(broad.schedule_start, '%Y-%m-%d %T') as scheduleStart
				    , date_format(broad.schedule_stop, '%Y-%m-%d %T') as scheduleStop, broad.GBR as gbr
				    , 'Unicats' as deleveryType, IFNULL(fecRatio, 0) as fecRatio
				    , format('10000', ',') as viewers
				    , IF(now() between broad.schedule_start and broad.schedule_stop, 'Y', 'N') as onAirYn
				    , schedule.id as scheduleId
				FROM broadcast_info broad
				INNER JOIN hotspot hotspot
				ON hotspot.hotspot_id = broad.said
				INNER JOIN city city
				ON city.city_id = hotspot.city_id 
				INNER JOIN schedule schedule
				ON broad.bcid = schedule.bcid 
				WHERE city.circle_id = #{psaid}
				<if test="hotspotListStr != '' and hotspotListStr != null">
					AND hotspot.hotspot_id IN (${hotspotListStr})
				</if>
			</when>
		</choose>
		) result
		WHERE 1=1
		<if test="searchServiceType != null and searchServiceType != ''">
			AND service = #{searchServiceType}
		</if>
		<if test="searchSchedule != null and searchSchedule != ''">
			<choose>
				<when test="searchSchedule == 'onair'">
					AND now() between scheduleStart and scheduleStop
				</when>
				<when test="searchSchedule == 'today'">
					<![CDATA[
					AND (date_format(now(), '%Y%m%d') = date_format(scheduleStart, '%Y%m%d')
						OR date_format(now(), '%Y%m%d') < date_format(scheduleStop, '%Y%m%d'))
					]]>
				</when>
			</choose>
		</if>
		<if test="searchDateFrom != null and searchDateFrom != ''">
			<![CDATA[
			AND date_format(scheduleStart, '%Y%m%d') >= #{searchDateFrom}
			]]>
		</if>
		<if test="searchDateTo != null and searchDateTo != ''">
			<![CDATA[
			AND date_format(scheduleStop, '%Y%m%d') <= #{searchDateTo}
			]]>
		</if>
		<if test="searchKeyword != null and searchKeyword != ''">
			AND (serviceId LIKE CONCAT('%', #{searchKeyword}, '%') 
				OR serviceName LIKE CONCAT('%', #{searchKeyword}, '%'))
		</if>
		<choose>
			<when test="layerDiv == 'city'">
				ORDER BY cityId
			</when>
			<otherwise>
				ORDER BY hotspotId
			</otherwise>
		</choose>
		, scheduleStart DESC
	</select>
</mapper>

